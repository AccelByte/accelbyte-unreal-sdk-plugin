/*@ fixed */

#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification.proto

#include "session_notification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace session {
constexpr NotificationEventEnvelope::NotificationEventEnvelope(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct NotificationEventEnvelopeDefaultTypeInternal {
  constexpr NotificationEventEnvelopeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationEventEnvelopeDefaultTypeInternal() {}
  union {
    NotificationEventEnvelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationEventEnvelopeDefaultTypeInternal _NotificationEventEnvelope_default_instance_;
constexpr UserV1::UserV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updatedat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserV1DefaultTypeInternal {
  constexpr UserV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserV1DefaultTypeInternal() {}
  union {
    UserV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserV1DefaultTypeInternal _UserV1_default_instance_;
constexpr PartySessionV1::PartySessionV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attributes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , join_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leader_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr)
  , version_(0){}
struct PartySessionV1DefaultTypeInternal {
  constexpr PartySessionV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartySessionV1DefaultTypeInternal() {}
  union {
    PartySessionV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartySessionV1DefaultTypeInternal _PartySessionV1_default_instance_;
constexpr SessionConfigV1::SessionConfigV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinability_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deployment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_players_(0)
  , max_players_(0){}
struct SessionConfigV1DefaultTypeInternal {
  constexpr SessionConfigV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionConfigV1DefaultTypeInternal() {}
  union {
    SessionConfigV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionConfigV1DefaultTypeInternal _SessionConfigV1_default_instance_;
constexpr PartyNotificationUserJoinedV1::PartyNotificationUserJoinedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartyNotificationUserJoinedV1DefaultTypeInternal {
  constexpr PartyNotificationUserJoinedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartyNotificationUserJoinedV1DefaultTypeInternal() {}
  union {
    PartyNotificationUserJoinedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartyNotificationUserJoinedV1DefaultTypeInternal _PartyNotificationUserJoinedV1_default_instance_;
constexpr PartyNotificationMembersChangedV1::PartyNotificationMembersChangedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leaderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartyNotificationMembersChangedV1DefaultTypeInternal {
  constexpr PartyNotificationMembersChangedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartyNotificationMembersChangedV1DefaultTypeInternal() {}
  union {
    PartyNotificationMembersChangedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartyNotificationMembersChangedV1DefaultTypeInternal _PartyNotificationMembersChangedV1_default_instance_;
constexpr PartyNotificationUserInvitedV1::PartyNotificationUserInvitedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : senderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartyNotificationUserInvitedV1DefaultTypeInternal {
  constexpr PartyNotificationUserInvitedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartyNotificationUserInvitedV1DefaultTypeInternal() {}
  union {
    PartyNotificationUserInvitedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartyNotificationUserInvitedV1DefaultTypeInternal _PartyNotificationUserInvitedV1_default_instance_;
constexpr PartyNotificationUserRejectV1::PartyNotificationUserRejectV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rejectedid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartyNotificationUserRejectV1DefaultTypeInternal {
  constexpr PartyNotificationUserRejectV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartyNotificationUserRejectV1DefaultTypeInternal() {}
  union {
    PartyNotificationUserRejectV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartyNotificationUserRejectV1DefaultTypeInternal _PartyNotificationUserRejectV1_default_instance_;
constexpr PartyNotificationUserKickedV1::PartyNotificationUserKickedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartyNotificationUserKickedV1DefaultTypeInternal {
  constexpr PartyNotificationUserKickedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartyNotificationUserKickedV1DefaultTypeInternal() {}
  union {
    PartyNotificationUserKickedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartyNotificationUserKickedV1DefaultTypeInternal _PartyNotificationUserKickedV1_default_instance_;
constexpr GameSessionNotificationUserInvitedV1::GameSessionNotificationUserInvitedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameSessionNotificationUserInvitedV1DefaultTypeInternal {
  constexpr GameSessionNotificationUserInvitedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSessionNotificationUserInvitedV1DefaultTypeInternal() {}
  union {
    GameSessionNotificationUserInvitedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSessionNotificationUserInvitedV1DefaultTypeInternal _GameSessionNotificationUserInvitedV1_default_instance_;
constexpr GameSessionNotificationUserJoinedV1::GameSessionNotificationUserJoinedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameSessionNotificationUserJoinedV1DefaultTypeInternal {
  constexpr GameSessionNotificationUserJoinedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSessionNotificationUserJoinedV1DefaultTypeInternal() {}
  union {
    GameSessionNotificationUserJoinedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSessionNotificationUserJoinedV1DefaultTypeInternal _GameSessionNotificationUserJoinedV1_default_instance_;
constexpr GameSessionNotificationMembersChangedV1::GameSessionNotificationMembersChangedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameSessionNotificationMembersChangedV1DefaultTypeInternal {
  constexpr GameSessionNotificationMembersChangedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSessionNotificationMembersChangedV1DefaultTypeInternal() {}
  union {
    GameSessionNotificationMembersChangedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSessionNotificationMembersChangedV1DefaultTypeInternal _GameSessionNotificationMembersChangedV1_default_instance_;
constexpr DSStatusChangedNotificationV1::DSStatusChangedNotificationV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameserver_(nullptr){}
struct DSStatusChangedNotificationV1DefaultTypeInternal {
  constexpr DSStatusChangedNotificationV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DSStatusChangedNotificationV1DefaultTypeInternal() {}
  union {
    DSStatusChangedNotificationV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DSStatusChangedNotificationV1DefaultTypeInternal _DSStatusChangedNotificationV1_default_instance_;
constexpr UserIDs::UserIDs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(){}
struct UserIDsDefaultTypeInternal {
  constexpr UserIDsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserIDsDefaultTypeInternal() {}
  union {
    UserIDs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserIDsDefaultTypeInternal _UserIDs_default_instance_;
constexpr Team::Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_(){}
struct TeamDefaultTypeInternal {
  constexpr TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeamDefaultTypeInternal() {}
  union {
    Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeamDefaultTypeInternal _Team_default_instance_;
constexpr GameSessionV1::GameSessionV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , teams_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attributes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , join_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , backfill_ticket_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr)
  , dsinformationv1_(nullptr)
  , version_(0){}
struct GameSessionV1DefaultTypeInternal {
  constexpr GameSessionV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSessionV1DefaultTypeInternal() {}
  union {
    GameSessionV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSessionV1DefaultTypeInternal _GameSessionV1_default_instance_;
constexpr DSInformationV1::DSInformationV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requested_regions_()
  , requested_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameserver_(nullptr){}
struct DSInformationV1DefaultTypeInternal {
  constexpr DSInformationV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DSInformationV1DefaultTypeInternal() {}
  union {
    DSInformationV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DSInformationV1DefaultTypeInternal _DSInformationV1_default_instance_;
constexpr GameServerV1_PortsEntry_DoNotUse::GameServerV1_PortsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameServerV1_PortsEntry_DoNotUseDefaultTypeInternal {
  constexpr GameServerV1_PortsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerV1_PortsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameServerV1_PortsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerV1_PortsEntry_DoNotUseDefaultTypeInternal _GameServerV1_PortsEntry_DoNotUse_default_instance_;
constexpr GameServerV1::GameServerV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternate_ips_()
  , ports_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , pod_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deployment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0)
  , is_override_game_version_(false){}
struct GameServerV1DefaultTypeInternal {
  constexpr GameServerV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerV1DefaultTypeInternal() {}
  union {
    GameServerV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerV1DefaultTypeInternal _GameServerV1_default_instance_;
constexpr GameSessionNotificationUserKickedV1::GameSessionNotificationUserKickedV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameSessionNotificationUserKickedV1DefaultTypeInternal {
  constexpr GameSessionNotificationUserKickedV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSessionNotificationUserKickedV1DefaultTypeInternal() {}
  union {
    GameSessionNotificationUserKickedV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSessionNotificationUserKickedV1DefaultTypeInternal _GameSessionNotificationUserKickedV1_default_instance_;
}  // namespace session
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_notification_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_notification_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_notification_2eproto = nullptr;

const uint32_t TableStruct_notification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::NotificationEventEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::session::NotificationEventEnvelope, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::session::NotificationEventEnvelope, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::UserV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::UserV1, id_),
  PROTOBUF_FIELD_OFFSET(::session::UserV1, status_),
  PROTOBUF_FIELD_OFFSET(::session::UserV1, updatedat_),
  PROTOBUF_FIELD_OFFSET(::session::UserV1, platform_id_),
  PROTOBUF_FIELD_OFFSET(::session::UserV1, platform_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, id_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, namespace__),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, attributes_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, join_type_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, created_at_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, updated_at_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, configuration_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, version_),
  PROTOBUF_FIELD_OFFSET(::session::PartySessionV1, leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, name_),
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, joinability_),
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, min_players_),
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, max_players_),
  PROTOBUF_FIELD_OFFSET(::session::SessionConfigV1, deployment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserJoinedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserJoinedV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserJoinedV1, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationMembersChangedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationMembersChangedV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationMembersChangedV1, partyid_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationMembersChangedV1, joinerid_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationMembersChangedV1, leaderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserInvitedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserInvitedV1, senderid_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserInvitedV1, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserRejectV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserRejectV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserRejectV1, partyid_),
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserRejectV1, rejectedid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserKickedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::PartyNotificationUserKickedV1, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserInvitedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserInvitedV1, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserJoinedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserJoinedV1, sessionid_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserJoinedV1, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationMembersChangedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationMembersChangedV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationMembersChangedV1, sessionid_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationMembersChangedV1, joinerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::DSStatusChangedNotificationV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::DSStatusChangedNotificationV1, gameserver_),
  PROTOBUF_FIELD_OFFSET(::session::DSStatusChangedNotificationV1, sessionid_),
  PROTOBUF_FIELD_OFFSET(::session::DSStatusChangedNotificationV1, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::UserIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::UserIDs, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::Team, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, id_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, namespace__),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, members_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, attributes_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, join_type_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, created_at_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, updated_at_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, configuration_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, version_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, match_pool_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, game_mode_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, backfill_ticket_id_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, teams_),
  PROTOBUF_FIELD_OFFSET(::session::GameSessionV1, dsinformationv1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::DSInformationV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::DSInformationV1, gameserver_),
  PROTOBUF_FIELD_OFFSET(::session::DSInformationV1, requested_regions_),
  PROTOBUF_FIELD_OFFSET(::session::DSInformationV1, requested_at_),
  PROTOBUF_FIELD_OFFSET(::session::DSInformationV1, status_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1_PortsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1_PortsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1_PortsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1_PortsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, pod_name_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, image_version_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, namespace__),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, ip_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, alternate_ips_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, port_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, protocol_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, ports_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, provider_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, game_version_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, status_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, session_id_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, deployment_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, region_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, custom_attribute_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, is_override_game_version_),
  PROTOBUF_FIELD_OFFSET(::session::GameServerV1, last_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserKickedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::session::GameSessionNotificationUserKickedV1, sessionid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::session::NotificationEventEnvelope)},
  { 19, -1, -1, sizeof(::session::UserV1)},
  { 30, -1, -1, sizeof(::session::PartySessionV1)},
  { 46, -1, -1, sizeof(::session::SessionConfigV1)},
  { 57, -1, -1, sizeof(::session::PartyNotificationUserJoinedV1)},
  { 65, -1, -1, sizeof(::session::PartyNotificationMembersChangedV1)},
  { 75, -1, -1, sizeof(::session::PartyNotificationUserInvitedV1)},
  { 83, -1, -1, sizeof(::session::PartyNotificationUserRejectV1)},
  { 92, -1, -1, sizeof(::session::PartyNotificationUserKickedV1)},
  { 99, -1, -1, sizeof(::session::GameSessionNotificationUserInvitedV1)},
  { 106, -1, -1, sizeof(::session::GameSessionNotificationUserJoinedV1)},
  { 114, -1, -1, sizeof(::session::GameSessionNotificationMembersChangedV1)},
  { 123, -1, -1, sizeof(::session::DSStatusChangedNotificationV1)},
  { 132, -1, -1, sizeof(::session::UserIDs)},
  { 139, -1, -1, sizeof(::session::Team)},
  { 146, -1, -1, sizeof(::session::GameSessionV1)},
  { 166, -1, -1, sizeof(::session::DSInformationV1)},
  { 176, 184, -1, sizeof(::session::GameServerV1_PortsEntry_DoNotUse)},
  { 186, -1, -1, sizeof(::session::GameServerV1)},
  { 209, -1, -1, sizeof(::session::GameSessionNotificationUserKickedV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_NotificationEventEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_UserV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartySessionV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_SessionConfigV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartyNotificationUserJoinedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartyNotificationMembersChangedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartyNotificationUserInvitedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartyNotificationUserRejectV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_PartyNotificationUserKickedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameSessionNotificationUserInvitedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameSessionNotificationUserJoinedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameSessionNotificationMembersChangedV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_DSStatusChangedNotificationV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_UserIDs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameSessionV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_DSInformationV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameServerV1_PortsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameServerV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::session::_GameSessionNotificationUserKickedV1_default_instance_),
};

const char descriptor_table_protodef_notification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022notification.proto\022\007session\"\331\t\n\031Notifi"
  "cationEventEnvelope\022a\n\036PartyNotification"
  "UserInvitedV1\030\001 \001(\0132\'.session.PartyNotif"
  "icationUserInvitedV1H\000R\016OnPartyInvited\022^"
  "\n\035PartyNotificationUserJoinedV1\030\002 \001(\0132&."
  "session.PartyNotificationUserJoinedV1H\000R"
  "\rOnPartyJoined\022n\n!PartyNotificationMembe"
  "rsChangedV1\030\003 \001(\0132*.session.PartyNotific"
  "ationMembersChangedV1H\000R\025OnPartyMembersC"
  "hanged\022`\n\035PartyNotificationUserRejectV1\030"
  "\004 \001(\0132&.session.PartyNotificationUserRej"
  "ectV1H\000R\017OnPartyRejected\022^\n\035PartyNotific"
  "ationUserKickedV1\030\005 \001(\0132&.session.PartyN"
  "otificationUserKickedV1H\000R\rOnPartyKicked"
  "\022A\n\016PartySessionV1\030\006 \001(\0132\027.session.Party"
  "SessionV1H\000R\016OnPartyUpdated\022o\n$GameSessi"
  "onNotificationUserInvitedV1\030\007 \001(\0132-.sess"
  "ion.GameSessionNotificationUserInvitedV1"
  "H\000R\020OnSessionInvited\022l\n#GameSessionNotif"
  "icationUserJoinedV1\030\010 \001(\0132,.session.Game"
  "SessionNotificationUserJoinedV1H\000R\017OnSes"
  "sionJoined\022l\n#GameSessionNotificationUse"
  "rKickedV1\030\014 \001(\0132,.session.GameSessionNot"
  "ificationUserKickedV1H\000R\017OnSessionKicked"
  "\022|\n\'GameSessionNotificationMembersChange"
  "dV1\030\t \001(\01320.session.GameSessionNotificat"
  "ionMembersChangedV1H\000R\027OnSessionMembersC"
  "hanged\022E\n\rGameSessionV1\030\n \001(\0132\026.session."
  "GameSessionV1H\000R\024OnGameSessionUpdated\022g\n"
  "\035DSStatusChangedNotificationV1\030\013 \001(\0132&.s"
  "ession.DSStatusChangedNotificationV1H\000R\026"
  "OnDSStatusChangedNotifB\t\n\007payload\"\231\001\n\006Us"
  "erV1\022\016\n\002id\030\001 \001(\tR\002id\022\026\n\006status\030\002 \001(\tR\006st"
  "atus\022\034\n\tupdatedAt\030\003 \001(\tR\tupdatedAt\022\037\n\013pl"
  "atform_id\030\004 \001(\tR\nplatformID\022(\n\020platform_"
  "user_id\030\005 \001(\tR\016platformUserID\"\333\002\n\016PartyS"
  "essionV1\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\tnamespace\030\002 "
  "\001(\tR\tnamespace\022)\n\007members\030\003 \003(\0132\017.sessio"
  "n.UserV1R\007members\022\036\n\nattributes\030\004 \001(\014R\na"
  "ttributes\022\033\n\tjoin_type\030\005 \001(\tR\010joinType\022\035"
  "\n\ncreated_at\030\006 \001(\tR\tcreatedAt\022\035\n\nupdated"
  "_at\030\007 \001(\tR\tupdatedAt\022>\n\rconfiguration\030\010 "
  "\001(\0132\030.session.SessionConfigV1R\rconfigura"
  "tion\022\030\n\007version\030\t \001(\005R\007version\022\033\n\tleader"
  "_id\030\n \001(\tR\010leaderID\"\251\001\n\017SessionConfigV1\022"
  "\022\n\004name\030\001 \001(\tR\004name\022 \n\013joinability\030\002 \001(\t"
  "R\013joinability\022\037\n\013min_players\030\003 \001(\005R\nminP"
  "layers\022\037\n\013max_players\030\004 \001(\005R\nmaxPlayers\022"
  "\036\n\ndeployment\030\005 \001(\tR\ndeployment\"d\n\035Party"
  "NotificationUserJoinedV1\022)\n\007members\030\001 \003("
  "\0132\017.session.UserV1R\007members\022\030\n\007PartyID\030\002"
  " \001(\tR\007partyID\"\240\001\n!PartyNotificationMembe"
  "rsChangedV1\022)\n\007members\030\001 \003(\0132\017.session.U"
  "serV1R\007members\022\030\n\007PartyID\030\002 \001(\tR\007partyID"
  "\022\032\n\010JoinerID\030\003 \001(\tR\010joinerID\022\032\n\010LeaderID"
  "\030\004 \001(\tR\010leaderID\"V\n\036PartyNotificationUse"
  "rInvitedV1\022\032\n\010senderID\030\001 \001(\tR\010senderID\022\030"
  "\n\007PartyID\030\002 \001(\tR\007partyID\"\204\001\n\035PartyNotifi"
  "cationUserRejectV1\022)\n\007members\030\001 \003(\0132\017.se"
  "ssion.UserV1R\007members\022\030\n\007PartyID\030\002 \001(\tR\007"
  "partyID\022\036\n\nRejectedID\030\003 \001(\tR\nrejectedID\""
  "9\n\035PartyNotificationUserKickedV1\022\030\n\007Part"
  "yID\030\001 \001(\tR\007partyID\"D\n$GameSessionNotific"
  "ationUserInvitedV1\022\034\n\tSessionID\030\001 \001(\tR\tS"
  "essionID\"n\n#GameSessionNotificationUserJ"
  "oinedV1\022\034\n\tSessionID\030\001 \001(\tR\tSessionID\022)\n"
  "\007members\030\002 \003(\0132\017.session.UserV1R\007members"
  "\"\216\001\n\'GameSessionNotificationMembersChang"
  "edV1\022)\n\007members\030\001 \003(\0132\017.session.UserV1R\007"
  "members\022\034\n\tSessionID\030\002 \001(\tR\tsessionID\022\032\n"
  "\010JoinerID\030\003 \001(\tR\010joinerID\"\213\001\n\035DSStatusCh"
  "angedNotificationV1\0226\n\nGameServer\030\001 \001(\0132"
  "\025.session.GameServerV1R\013game_server\022\034\n\tS"
  "essionID\030\002 \001(\tR\tsessionID\022\024\n\005Error\030\003 \001(\t"
  "R\005error\"#\n\007UserIDs\022\030\n\006userID\030\001 \003(\tR\010user"
  "_ids\"\"\n\004Team\022\032\n\010user_ids\030\001 \003(\tR\010user_ids"
  "\"\223\004\n\rGameSessionV1\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\tna"
  "mespace\030\002 \001(\tR\tnamespace\022)\n\007members\030\003 \003("
  "\0132\017.session.UserV1R\007members\022\036\n\nattribute"
  "s\030\004 \001(\014R\nattributes\022\033\n\tjoin_type\030\005 \001(\tR\010"
  "joinType\022\035\n\ncreated_at\030\006 \001(\tR\tcreatedAt\022"
  "\035\n\nupdated_at\030\007 \001(\tR\tupdatedAt\022>\n\rconfig"
  "uration\030\010 \001(\0132\030.session.SessionConfigV1R"
  "\rconfiguration\022\030\n\007version\030\t \001(\005R\007version"
  "\022\036\n\nmatch_pool\030\n \001(\tR\nmatch_pool\022\034\n\tgame"
  "_mode\030\013 \001(\tR\tgame_mode\022.\n\022backfill_ticke"
  "t_id\030\014 \001(\tR\022backfill_ticket_id\022#\n\005teams\030"
  "\r \003(\0132\r.session.TeamR\005teams\022A\n\017DSInforma"
  "tionV1\030\016 \001(\0132\030.session.DSInformationV1R\016"
  "ds_information\"\263\001\n\017DSInformationV1\0226\n\nGa"
  "meServer\030\001 \001(\0132\025.session.GameServerV1R\013g"
  "ame_server\022,\n\021requested_regions\030\002 \003(\tR\021r"
  "equested_regions\022\"\n\014requested_at\030\003 \001(\tR\014"
  "requested_at\022\026\n\006status\030\005 \001(\tR\006status\"\364\004\n"
  "\014GameServerV1\022\032\n\010pod_name\030\001 \001(\tR\010pod_nam"
  "e\022$\n\rimage_version\030\002 \001(\tR\rimage_version\022"
  "\034\n\tnamespace\030\003 \001(\tR\tnamespace\022\016\n\002ip\030\004 \001("
  "\tR\002ip\022$\n\ralternate_ips\030\005 \003(\tR\ralternate_"
  "ips\022\022\n\004port\030\006 \001(\005R\004port\022\032\n\010protocol\030\007 \001("
  "\tR\010protocol\0226\n\005ports\030\010 \003(\0132 .session.Gam"
  "eServerV1.PortsEntryR\005ports\022\032\n\010provider\030"
  "\t \001(\tR\010provider\022\"\n\014game_version\030\n \001(\tR\014g"
  "ame_version\022\026\n\006status\030\013 \001(\tR\006status\022\036\n\ns"
  "ession_id\030\014 \001(\tR\nsession_id\022\036\n\ndeploymen"
  "t\030\r \001(\tR\ndeployment\022\026\n\006region\030\016 \001(\tR\006reg"
  "ion\022*\n\020custom_attribute\030\017 \001(\tR\020custom_at"
  "tribute\022:\n\030is_override_game_version\030\020 \001("
  "\010R\030is_override_game_version\022 \n\013last_upda"
  "te\030\021 \001(\tR\013last_update\032,\n\nPortsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"C\n#GameSessi"
  "onNotificationUserKickedV1\022\034\n\tSessionID\030"
  "\001 \001(\tR\tsessionIDB\016Z\014/event;eventb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_notification_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notification_2eproto = {
  false, false, 4480, descriptor_table_protodef_notification_2eproto, "notification.proto", 
  &descriptor_table_notification_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_notification_2eproto::offsets,
  file_level_metadata_notification_2eproto, file_level_enum_descriptors_notification_2eproto, file_level_service_descriptors_notification_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_notification_2eproto_getter() {
  return &descriptor_table_notification_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_notification_2eproto(&descriptor_table_notification_2eproto);
namespace session {

// ===================================================================

class NotificationEventEnvelope::_Internal {
 public:
  static const ::session::PartyNotificationUserInvitedV1& partynotificationuserinvitedv1(const NotificationEventEnvelope* msg);
  static const ::session::PartyNotificationUserJoinedV1& partynotificationuserjoinedv1(const NotificationEventEnvelope* msg);
  static const ::session::PartyNotificationMembersChangedV1& partynotificationmemberschangedv1(const NotificationEventEnvelope* msg);
  static const ::session::PartyNotificationUserRejectV1& partynotificationuserrejectv1(const NotificationEventEnvelope* msg);
  static const ::session::PartyNotificationUserKickedV1& partynotificationuserkickedv1(const NotificationEventEnvelope* msg);
  static const ::session::PartySessionV1& partysessionv1(const NotificationEventEnvelope* msg);
  static const ::session::GameSessionNotificationUserInvitedV1& gamesessionnotificationuserinvitedv1(const NotificationEventEnvelope* msg);
  static const ::session::GameSessionNotificationUserJoinedV1& gamesessionnotificationuserjoinedv1(const NotificationEventEnvelope* msg);
  static const ::session::GameSessionNotificationUserKickedV1& gamesessionnotificationuserkickedv1(const NotificationEventEnvelope* msg);
  static const ::session::GameSessionNotificationMembersChangedV1& gamesessionnotificationmemberschangedv1(const NotificationEventEnvelope* msg);
  static const ::session::GameSessionV1& gamesessionv1(const NotificationEventEnvelope* msg);
  static const ::session::DSStatusChangedNotificationV1& dsstatuschangednotificationv1(const NotificationEventEnvelope* msg);
};

const ::session::PartyNotificationUserInvitedV1&
NotificationEventEnvelope::_Internal::partynotificationuserinvitedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partynotificationuserinvitedv1_;
}
const ::session::PartyNotificationUserJoinedV1&
NotificationEventEnvelope::_Internal::partynotificationuserjoinedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partynotificationuserjoinedv1_;
}
const ::session::PartyNotificationMembersChangedV1&
NotificationEventEnvelope::_Internal::partynotificationmemberschangedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partynotificationmemberschangedv1_;
}
const ::session::PartyNotificationUserRejectV1&
NotificationEventEnvelope::_Internal::partynotificationuserrejectv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partynotificationuserrejectv1_;
}
const ::session::PartyNotificationUserKickedV1&
NotificationEventEnvelope::_Internal::partynotificationuserkickedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partynotificationuserkickedv1_;
}
const ::session::PartySessionV1&
NotificationEventEnvelope::_Internal::partysessionv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.partysessionv1_;
}
const ::session::GameSessionNotificationUserInvitedV1&
NotificationEventEnvelope::_Internal::gamesessionnotificationuserinvitedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.gamesessionnotificationuserinvitedv1_;
}
const ::session::GameSessionNotificationUserJoinedV1&
NotificationEventEnvelope::_Internal::gamesessionnotificationuserjoinedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.gamesessionnotificationuserjoinedv1_;
}
const ::session::GameSessionNotificationUserKickedV1&
NotificationEventEnvelope::_Internal::gamesessionnotificationuserkickedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.gamesessionnotificationuserkickedv1_;
}
const ::session::GameSessionNotificationMembersChangedV1&
NotificationEventEnvelope::_Internal::gamesessionnotificationmemberschangedv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.gamesessionnotificationmemberschangedv1_;
}
const ::session::GameSessionV1&
NotificationEventEnvelope::_Internal::gamesessionv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.gamesessionv1_;
}
const ::session::DSStatusChangedNotificationV1&
NotificationEventEnvelope::_Internal::dsstatuschangednotificationv1(const NotificationEventEnvelope* msg) {
  return *msg->payload_.dsstatuschangednotificationv1_;
}
void NotificationEventEnvelope::set_allocated_partynotificationuserinvitedv1(::session::PartyNotificationUserInvitedV1* partynotificationuserinvitedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partynotificationuserinvitedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartyNotificationUserInvitedV1>::GetOwningArena(partynotificationuserinvitedv1);
    if (message_arena != submessage_arena) {
      partynotificationuserinvitedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partynotificationuserinvitedv1, submessage_arena);
    }
    set_has_partynotificationuserinvitedv1();
    payload_.partynotificationuserinvitedv1_ = partynotificationuserinvitedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartyNotificationUserInvitedV1)
}
void NotificationEventEnvelope::set_allocated_partynotificationuserjoinedv1(::session::PartyNotificationUserJoinedV1* partynotificationuserjoinedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partynotificationuserjoinedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartyNotificationUserJoinedV1>::GetOwningArena(partynotificationuserjoinedv1);
    if (message_arena != submessage_arena) {
      partynotificationuserjoinedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partynotificationuserjoinedv1, submessage_arena);
    }
    set_has_partynotificationuserjoinedv1();
    payload_.partynotificationuserjoinedv1_ = partynotificationuserjoinedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartyNotificationUserJoinedV1)
}
void NotificationEventEnvelope::set_allocated_partynotificationmemberschangedv1(::session::PartyNotificationMembersChangedV1* partynotificationmemberschangedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partynotificationmemberschangedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartyNotificationMembersChangedV1>::GetOwningArena(partynotificationmemberschangedv1);
    if (message_arena != submessage_arena) {
      partynotificationmemberschangedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partynotificationmemberschangedv1, submessage_arena);
    }
    set_has_partynotificationmemberschangedv1();
    payload_.partynotificationmemberschangedv1_ = partynotificationmemberschangedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartyNotificationMembersChangedV1)
}
void NotificationEventEnvelope::set_allocated_partynotificationuserrejectv1(::session::PartyNotificationUserRejectV1* partynotificationuserrejectv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partynotificationuserrejectv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartyNotificationUserRejectV1>::GetOwningArena(partynotificationuserrejectv1);
    if (message_arena != submessage_arena) {
      partynotificationuserrejectv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partynotificationuserrejectv1, submessage_arena);
    }
    set_has_partynotificationuserrejectv1();
    payload_.partynotificationuserrejectv1_ = partynotificationuserrejectv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartyNotificationUserRejectV1)
}
void NotificationEventEnvelope::set_allocated_partynotificationuserkickedv1(::session::PartyNotificationUserKickedV1* partynotificationuserkickedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partynotificationuserkickedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartyNotificationUserKickedV1>::GetOwningArena(partynotificationuserkickedv1);
    if (message_arena != submessage_arena) {
      partynotificationuserkickedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partynotificationuserkickedv1, submessage_arena);
    }
    set_has_partynotificationuserkickedv1();
    payload_.partynotificationuserkickedv1_ = partynotificationuserkickedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartyNotificationUserKickedV1)
}
void NotificationEventEnvelope::set_allocated_partysessionv1(::session::PartySessionV1* partysessionv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (partysessionv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::PartySessionV1>::GetOwningArena(partysessionv1);
    if (message_arena != submessage_arena) {
      partysessionv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partysessionv1, submessage_arena);
    }
    set_has_partysessionv1();
    payload_.partysessionv1_ = partysessionv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.PartySessionV1)
}
void NotificationEventEnvelope::set_allocated_gamesessionnotificationuserinvitedv1(::session::GameSessionNotificationUserInvitedV1* gamesessionnotificationuserinvitedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gamesessionnotificationuserinvitedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::GameSessionNotificationUserInvitedV1>::GetOwningArena(gamesessionnotificationuserinvitedv1);
    if (message_arena != submessage_arena) {
      gamesessionnotificationuserinvitedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesessionnotificationuserinvitedv1, submessage_arena);
    }
    set_has_gamesessionnotificationuserinvitedv1();
    payload_.gamesessionnotificationuserinvitedv1_ = gamesessionnotificationuserinvitedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.GameSessionNotificationUserInvitedV1)
}
void NotificationEventEnvelope::set_allocated_gamesessionnotificationuserjoinedv1(::session::GameSessionNotificationUserJoinedV1* gamesessionnotificationuserjoinedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gamesessionnotificationuserjoinedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::GameSessionNotificationUserJoinedV1>::GetOwningArena(gamesessionnotificationuserjoinedv1);
    if (message_arena != submessage_arena) {
      gamesessionnotificationuserjoinedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesessionnotificationuserjoinedv1, submessage_arena);
    }
    set_has_gamesessionnotificationuserjoinedv1();
    payload_.gamesessionnotificationuserjoinedv1_ = gamesessionnotificationuserjoinedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.GameSessionNotificationUserJoinedV1)
}
void NotificationEventEnvelope::set_allocated_gamesessionnotificationuserkickedv1(::session::GameSessionNotificationUserKickedV1* gamesessionnotificationuserkickedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gamesessionnotificationuserkickedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::GameSessionNotificationUserKickedV1>::GetOwningArena(gamesessionnotificationuserkickedv1);
    if (message_arena != submessage_arena) {
      gamesessionnotificationuserkickedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesessionnotificationuserkickedv1, submessage_arena);
    }
    set_has_gamesessionnotificationuserkickedv1();
    payload_.gamesessionnotificationuserkickedv1_ = gamesessionnotificationuserkickedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.GameSessionNotificationUserKickedV1)
}
void NotificationEventEnvelope::set_allocated_gamesessionnotificationmemberschangedv1(::session::GameSessionNotificationMembersChangedV1* gamesessionnotificationmemberschangedv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gamesessionnotificationmemberschangedv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::GameSessionNotificationMembersChangedV1>::GetOwningArena(gamesessionnotificationmemberschangedv1);
    if (message_arena != submessage_arena) {
      gamesessionnotificationmemberschangedv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesessionnotificationmemberschangedv1, submessage_arena);
    }
    set_has_gamesessionnotificationmemberschangedv1();
    payload_.gamesessionnotificationmemberschangedv1_ = gamesessionnotificationmemberschangedv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.GameSessionNotificationMembersChangedV1)
}
void NotificationEventEnvelope::set_allocated_gamesessionv1(::session::GameSessionV1* gamesessionv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gamesessionv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::GameSessionV1>::GetOwningArena(gamesessionv1);
    if (message_arena != submessage_arena) {
      gamesessionv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesessionv1, submessage_arena);
    }
    set_has_gamesessionv1();
    payload_.gamesessionv1_ = gamesessionv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.GameSessionV1)
}
void NotificationEventEnvelope::set_allocated_dsstatuschangednotificationv1(::session::DSStatusChangedNotificationV1* dsstatuschangednotificationv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (dsstatuschangednotificationv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::session::DSStatusChangedNotificationV1>::GetOwningArena(dsstatuschangednotificationv1);
    if (message_arena != submessage_arena) {
      dsstatuschangednotificationv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dsstatuschangednotificationv1, submessage_arena);
    }
    set_has_dsstatuschangednotificationv1();
    payload_.dsstatuschangednotificationv1_ = dsstatuschangednotificationv1;
  }
  // @@protoc_insertion_point(field_set_allocated:session.NotificationEventEnvelope.DSStatusChangedNotificationV1)
}
NotificationEventEnvelope::NotificationEventEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.NotificationEventEnvelope)
}
NotificationEventEnvelope::NotificationEventEnvelope(const NotificationEventEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kPartyNotificationUserInvitedV1: {
      _internal_mutable_partynotificationuserinvitedv1()->::session::PartyNotificationUserInvitedV1::MergeFrom(from._internal_partynotificationuserinvitedv1());
      break;
    }
    case kPartyNotificationUserJoinedV1: {
      _internal_mutable_partynotificationuserjoinedv1()->::session::PartyNotificationUserJoinedV1::MergeFrom(from._internal_partynotificationuserjoinedv1());
      break;
    }
    case kPartyNotificationMembersChangedV1: {
      _internal_mutable_partynotificationmemberschangedv1()->::session::PartyNotificationMembersChangedV1::MergeFrom(from._internal_partynotificationmemberschangedv1());
      break;
    }
    case kPartyNotificationUserRejectV1: {
      _internal_mutable_partynotificationuserrejectv1()->::session::PartyNotificationUserRejectV1::MergeFrom(from._internal_partynotificationuserrejectv1());
      break;
    }
    case kPartyNotificationUserKickedV1: {
      _internal_mutable_partynotificationuserkickedv1()->::session::PartyNotificationUserKickedV1::MergeFrom(from._internal_partynotificationuserkickedv1());
      break;
    }
    case kPartySessionV1: {
      _internal_mutable_partysessionv1()->::session::PartySessionV1::MergeFrom(from._internal_partysessionv1());
      break;
    }
    case kGameSessionNotificationUserInvitedV1: {
      _internal_mutable_gamesessionnotificationuserinvitedv1()->::session::GameSessionNotificationUserInvitedV1::MergeFrom(from._internal_gamesessionnotificationuserinvitedv1());
      break;
    }
    case kGameSessionNotificationUserJoinedV1: {
      _internal_mutable_gamesessionnotificationuserjoinedv1()->::session::GameSessionNotificationUserJoinedV1::MergeFrom(from._internal_gamesessionnotificationuserjoinedv1());
      break;
    }
    case kGameSessionNotificationUserKickedV1: {
      _internal_mutable_gamesessionnotificationuserkickedv1()->::session::GameSessionNotificationUserKickedV1::MergeFrom(from._internal_gamesessionnotificationuserkickedv1());
      break;
    }
    case kGameSessionNotificationMembersChangedV1: {
      _internal_mutable_gamesessionnotificationmemberschangedv1()->::session::GameSessionNotificationMembersChangedV1::MergeFrom(from._internal_gamesessionnotificationmemberschangedv1());
      break;
    }
    case kGameSessionV1: {
      _internal_mutable_gamesessionv1()->::session::GameSessionV1::MergeFrom(from._internal_gamesessionv1());
      break;
    }
    case kDSStatusChangedNotificationV1: {
      _internal_mutable_dsstatuschangednotificationv1()->::session::DSStatusChangedNotificationV1::MergeFrom(from._internal_dsstatuschangednotificationv1());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:session.NotificationEventEnvelope)
}

inline void NotificationEventEnvelope::SharedCtor() {
clear_has_payload();
}

NotificationEventEnvelope::~NotificationEventEnvelope() {
  // @@protoc_insertion_point(destructor:session.NotificationEventEnvelope)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotificationEventEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void NotificationEventEnvelope::ArenaDtor(void* object) {
  NotificationEventEnvelope* _this = reinterpret_cast< NotificationEventEnvelope* >(object);
  (void)_this;
}
void NotificationEventEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationEventEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationEventEnvelope::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:session.NotificationEventEnvelope)
  switch (payload_case()) {
    case kPartyNotificationUserInvitedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partynotificationuserinvitedv1_;
      }
      break;
    }
    case kPartyNotificationUserJoinedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partynotificationuserjoinedv1_;
      }
      break;
    }
    case kPartyNotificationMembersChangedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partynotificationmemberschangedv1_;
      }
      break;
    }
    case kPartyNotificationUserRejectV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partynotificationuserrejectv1_;
      }
      break;
    }
    case kPartyNotificationUserKickedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partynotificationuserkickedv1_;
      }
      break;
    }
    case kPartySessionV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.partysessionv1_;
      }
      break;
    }
    case kGameSessionNotificationUserInvitedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gamesessionnotificationuserinvitedv1_;
      }
      break;
    }
    case kGameSessionNotificationUserJoinedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gamesessionnotificationuserjoinedv1_;
      }
      break;
    }
    case kGameSessionNotificationUserKickedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gamesessionnotificationuserkickedv1_;
      }
      break;
    }
    case kGameSessionNotificationMembersChangedV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gamesessionnotificationmemberschangedv1_;
      }
      break;
    }
    case kGameSessionV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gamesessionv1_;
      }
      break;
    }
    case kDSStatusChangedNotificationV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.dsstatuschangednotificationv1_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void NotificationEventEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:session.NotificationEventEnvelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationEventEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .session.PartyNotificationUserInvitedV1 PartyNotificationUserInvitedV1 = 1 [json_name = "OnPartyInvited"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_partynotificationuserinvitedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.PartyNotificationUserJoinedV1 PartyNotificationUserJoinedV1 = 2 [json_name = "OnPartyJoined"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partynotificationuserjoinedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.PartyNotificationMembersChangedV1 PartyNotificationMembersChangedV1 = 3 [json_name = "OnPartyMembersChanged"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partynotificationmemberschangedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.PartyNotificationUserRejectV1 PartyNotificationUserRejectV1 = 4 [json_name = "OnPartyRejected"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partynotificationuserrejectv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.PartyNotificationUserKickedV1 PartyNotificationUserKickedV1 = 5 [json_name = "OnPartyKicked"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_partynotificationuserkickedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.PartySessionV1 PartySessionV1 = 6 [json_name = "OnPartyUpdated"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_partysessionv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.GameSessionNotificationUserInvitedV1 GameSessionNotificationUserInvitedV1 = 7 [json_name = "OnSessionInvited"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesessionnotificationuserinvitedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.GameSessionNotificationUserJoinedV1 GameSessionNotificationUserJoinedV1 = 8 [json_name = "OnSessionJoined"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesessionnotificationuserjoinedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.GameSessionNotificationMembersChangedV1 GameSessionNotificationMembersChangedV1 = 9 [json_name = "OnSessionMembersChanged"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesessionnotificationmemberschangedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.GameSessionV1 GameSessionV1 = 10 [json_name = "OnGameSessionUpdated"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesessionv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.DSStatusChangedNotificationV1 DSStatusChangedNotificationV1 = 11 [json_name = "OnDSStatusChangedNotif"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsstatuschangednotificationv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.GameSessionNotificationUserKickedV1 GameSessionNotificationUserKickedV1 = 12 [json_name = "OnSessionKicked"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesessionnotificationuserkickedv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationEventEnvelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.NotificationEventEnvelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.PartyNotificationUserInvitedV1 PartyNotificationUserInvitedV1 = 1 [json_name = "OnPartyInvited"];
  if (_internal_has_partynotificationuserinvitedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::partynotificationuserinvitedv1(this), target, stream);
  }

  // .session.PartyNotificationUserJoinedV1 PartyNotificationUserJoinedV1 = 2 [json_name = "OnPartyJoined"];
  if (_internal_has_partynotificationuserjoinedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partynotificationuserjoinedv1(this), target, stream);
  }

  // .session.PartyNotificationMembersChangedV1 PartyNotificationMembersChangedV1 = 3 [json_name = "OnPartyMembersChanged"];
  if (_internal_has_partynotificationmemberschangedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::partynotificationmemberschangedv1(this), target, stream);
  }

  // .session.PartyNotificationUserRejectV1 PartyNotificationUserRejectV1 = 4 [json_name = "OnPartyRejected"];
  if (_internal_has_partynotificationuserrejectv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::partynotificationuserrejectv1(this), target, stream);
  }

  // .session.PartyNotificationUserKickedV1 PartyNotificationUserKickedV1 = 5 [json_name = "OnPartyKicked"];
  if (_internal_has_partynotificationuserkickedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::partynotificationuserkickedv1(this), target, stream);
  }

  // .session.PartySessionV1 PartySessionV1 = 6 [json_name = "OnPartyUpdated"];
  if (_internal_has_partysessionv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::partysessionv1(this), target, stream);
  }

  // .session.GameSessionNotificationUserInvitedV1 GameSessionNotificationUserInvitedV1 = 7 [json_name = "OnSessionInvited"];
  if (_internal_has_gamesessionnotificationuserinvitedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gamesessionnotificationuserinvitedv1(this), target, stream);
  }

  // .session.GameSessionNotificationUserJoinedV1 GameSessionNotificationUserJoinedV1 = 8 [json_name = "OnSessionJoined"];
  if (_internal_has_gamesessionnotificationuserjoinedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gamesessionnotificationuserjoinedv1(this), target, stream);
  }

  // .session.GameSessionNotificationMembersChangedV1 GameSessionNotificationMembersChangedV1 = 9 [json_name = "OnSessionMembersChanged"];
  if (_internal_has_gamesessionnotificationmemberschangedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gamesessionnotificationmemberschangedv1(this), target, stream);
  }

  // .session.GameSessionV1 GameSessionV1 = 10 [json_name = "OnGameSessionUpdated"];
  if (_internal_has_gamesessionv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::gamesessionv1(this), target, stream);
  }

  // .session.DSStatusChangedNotificationV1 DSStatusChangedNotificationV1 = 11 [json_name = "OnDSStatusChangedNotif"];
  if (_internal_has_dsstatuschangednotificationv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::dsstatuschangednotificationv1(this), target, stream);
  }

  // .session.GameSessionNotificationUserKickedV1 GameSessionNotificationUserKickedV1 = 12 [json_name = "OnSessionKicked"];
  if (_internal_has_gamesessionnotificationuserkickedv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::gamesessionnotificationuserkickedv1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.NotificationEventEnvelope)
  return target;
}

size_t NotificationEventEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.NotificationEventEnvelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .session.PartyNotificationUserInvitedV1 PartyNotificationUserInvitedV1 = 1 [json_name = "OnPartyInvited"];
    case kPartyNotificationUserInvitedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partynotificationuserinvitedv1_);
      break;
    }
    // .session.PartyNotificationUserJoinedV1 PartyNotificationUserJoinedV1 = 2 [json_name = "OnPartyJoined"];
    case kPartyNotificationUserJoinedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partynotificationuserjoinedv1_);
      break;
    }
    // .session.PartyNotificationMembersChangedV1 PartyNotificationMembersChangedV1 = 3 [json_name = "OnPartyMembersChanged"];
    case kPartyNotificationMembersChangedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partynotificationmemberschangedv1_);
      break;
    }
    // .session.PartyNotificationUserRejectV1 PartyNotificationUserRejectV1 = 4 [json_name = "OnPartyRejected"];
    case kPartyNotificationUserRejectV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partynotificationuserrejectv1_);
      break;
    }
    // .session.PartyNotificationUserKickedV1 PartyNotificationUserKickedV1 = 5 [json_name = "OnPartyKicked"];
    case kPartyNotificationUserKickedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partynotificationuserkickedv1_);
      break;
    }
    // .session.PartySessionV1 PartySessionV1 = 6 [json_name = "OnPartyUpdated"];
    case kPartySessionV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.partysessionv1_);
      break;
    }
    // .session.GameSessionNotificationUserInvitedV1 GameSessionNotificationUserInvitedV1 = 7 [json_name = "OnSessionInvited"];
    case kGameSessionNotificationUserInvitedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gamesessionnotificationuserinvitedv1_);
      break;
    }
    // .session.GameSessionNotificationUserJoinedV1 GameSessionNotificationUserJoinedV1 = 8 [json_name = "OnSessionJoined"];
    case kGameSessionNotificationUserJoinedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gamesessionnotificationuserjoinedv1_);
      break;
    }
    // .session.GameSessionNotificationUserKickedV1 GameSessionNotificationUserKickedV1 = 12 [json_name = "OnSessionKicked"];
    case kGameSessionNotificationUserKickedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gamesessionnotificationuserkickedv1_);
      break;
    }
    // .session.GameSessionNotificationMembersChangedV1 GameSessionNotificationMembersChangedV1 = 9 [json_name = "OnSessionMembersChanged"];
    case kGameSessionNotificationMembersChangedV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gamesessionnotificationmemberschangedv1_);
      break;
    }
    // .session.GameSessionV1 GameSessionV1 = 10 [json_name = "OnGameSessionUpdated"];
    case kGameSessionV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gamesessionv1_);
      break;
    }
    // .session.DSStatusChangedNotificationV1 DSStatusChangedNotificationV1 = 11 [json_name = "OnDSStatusChangedNotif"];
    case kDSStatusChangedNotificationV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.dsstatuschangednotificationv1_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationEventEnvelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotificationEventEnvelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationEventEnvelope::GetClassData() const { return &_class_data_; }

void NotificationEventEnvelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotificationEventEnvelope *>(to)->MergeFrom(
      static_cast<const NotificationEventEnvelope &>(from));
}


void NotificationEventEnvelope::MergeFrom(const NotificationEventEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.NotificationEventEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kPartyNotificationUserInvitedV1: {
      _internal_mutable_partynotificationuserinvitedv1()->::session::PartyNotificationUserInvitedV1::MergeFrom(from._internal_partynotificationuserinvitedv1());
      break;
    }
    case kPartyNotificationUserJoinedV1: {
      _internal_mutable_partynotificationuserjoinedv1()->::session::PartyNotificationUserJoinedV1::MergeFrom(from._internal_partynotificationuserjoinedv1());
      break;
    }
    case kPartyNotificationMembersChangedV1: {
      _internal_mutable_partynotificationmemberschangedv1()->::session::PartyNotificationMembersChangedV1::MergeFrom(from._internal_partynotificationmemberschangedv1());
      break;
    }
    case kPartyNotificationUserRejectV1: {
      _internal_mutable_partynotificationuserrejectv1()->::session::PartyNotificationUserRejectV1::MergeFrom(from._internal_partynotificationuserrejectv1());
      break;
    }
    case kPartyNotificationUserKickedV1: {
      _internal_mutable_partynotificationuserkickedv1()->::session::PartyNotificationUserKickedV1::MergeFrom(from._internal_partynotificationuserkickedv1());
      break;
    }
    case kPartySessionV1: {
      _internal_mutable_partysessionv1()->::session::PartySessionV1::MergeFrom(from._internal_partysessionv1());
      break;
    }
    case kGameSessionNotificationUserInvitedV1: {
      _internal_mutable_gamesessionnotificationuserinvitedv1()->::session::GameSessionNotificationUserInvitedV1::MergeFrom(from._internal_gamesessionnotificationuserinvitedv1());
      break;
    }
    case kGameSessionNotificationUserJoinedV1: {
      _internal_mutable_gamesessionnotificationuserjoinedv1()->::session::GameSessionNotificationUserJoinedV1::MergeFrom(from._internal_gamesessionnotificationuserjoinedv1());
      break;
    }
    case kGameSessionNotificationUserKickedV1: {
      _internal_mutable_gamesessionnotificationuserkickedv1()->::session::GameSessionNotificationUserKickedV1::MergeFrom(from._internal_gamesessionnotificationuserkickedv1());
      break;
    }
    case kGameSessionNotificationMembersChangedV1: {
      _internal_mutable_gamesessionnotificationmemberschangedv1()->::session::GameSessionNotificationMembersChangedV1::MergeFrom(from._internal_gamesessionnotificationmemberschangedv1());
      break;
    }
    case kGameSessionV1: {
      _internal_mutable_gamesessionv1()->::session::GameSessionV1::MergeFrom(from._internal_gamesessionv1());
      break;
    }
    case kDSStatusChangedNotificationV1: {
      _internal_mutable_dsstatuschangednotificationv1()->::session::DSStatusChangedNotificationV1::MergeFrom(from._internal_dsstatuschangednotificationv1());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationEventEnvelope::CopyFrom(const NotificationEventEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.NotificationEventEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationEventEnvelope::IsInitialized() const {
  return true;
}

void NotificationEventEnvelope::InternalSwap(NotificationEventEnvelope* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationEventEnvelope::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[0]);
}

// ===================================================================

class UserV1::_Internal {
 public:
};

UserV1::UserV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.UserV1)
}
UserV1::UserV1(const UserV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  updatedat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    updatedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatedat().empty()) {
    updatedat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updatedat(), 
      GetArenaForAllocation());
  }
  platform_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform_id().empty()) {
    platform_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_id(), 
      GetArenaForAllocation());
  }
  platform_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform_user_id().empty()) {
    platform_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.UserV1)
}

inline void UserV1::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
updatedat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  updatedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserV1::~UserV1() {
  // @@protoc_insertion_point(destructor:session.UserV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatedat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserV1::ArenaDtor(void* object) {
  UserV1* _this = reinterpret_cast< UserV1* >(object);
  (void)_this;
}
void UserV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.UserV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  status_.ClearToEmpty();
  updatedat_.ClearToEmpty();
  platform_id_.ClearToEmpty();
  platform_user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserV1.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserV1.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updatedAt = 3 [json_name = "updatedAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_updatedat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserV1.updatedAt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string platform_id = 4 [json_name = "platformID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_platform_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserV1.platform_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string platform_user_id = 5 [json_name = "platformUserID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_platform_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserV1.platform_user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.UserV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserV1.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserV1.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // string updatedAt = 3 [json_name = "updatedAt"];
  if (!this->_internal_updatedat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatedat().data(), static_cast<int>(this->_internal_updatedat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserV1.updatedAt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_updatedat(), target);
  }

  // string platform_id = 4 [json_name = "platformID"];
  if (!this->_internal_platform_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_id().data(), static_cast<int>(this->_internal_platform_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserV1.platform_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_platform_id(), target);
  }

  // string platform_user_id = 5 [json_name = "platformUserID"];
  if (!this->_internal_platform_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_user_id().data(), static_cast<int>(this->_internal_platform_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserV1.platform_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.UserV1)
  return target;
}

size_t UserV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.UserV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string updatedAt = 3 [json_name = "updatedAt"];
  if (!this->_internal_updatedat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedat());
  }

  // string platform_id = 4 [json_name = "platformID"];
  if (!this->_internal_platform_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_id());
  }

  // string platform_user_id = 5 [json_name = "platformUserID"];
  if (!this->_internal_platform_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserV1::GetClassData() const { return &_class_data_; }

void UserV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserV1 *>(to)->MergeFrom(
      static_cast<const UserV1 &>(from));
}


void UserV1::MergeFrom(const UserV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.UserV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_updatedat().empty()) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (!from._internal_platform_id().empty()) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (!from._internal_platform_user_id().empty()) {
    _internal_set_platform_user_id(from._internal_platform_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserV1::CopyFrom(const UserV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.UserV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserV1::IsInitialized() const {
  return true;
}

void UserV1::InternalSwap(UserV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updatedat_, lhs_arena,
      &other->updatedat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &platform_id_, lhs_arena,
      &other->platform_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &platform_user_id_, lhs_arena,
      &other->platform_user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[1]);
}

// ===================================================================

class PartySessionV1::_Internal {
 public:
  static const ::session::SessionConfigV1& configuration(const PartySessionV1* msg);
};

const ::session::SessionConfigV1&
PartySessionV1::_Internal::configuration(const PartySessionV1* msg) {
  return *msg->configuration_;
}
PartySessionV1::PartySessionV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartySessionV1)
}
PartySessionV1::PartySessionV1(const PartySessionV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attributes().empty()) {
    attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes(), 
      GetArenaForAllocation());
  }
  join_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    join_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_join_type().empty()) {
    join_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_join_type(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    created_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    updated_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leader_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::session::SessionConfigV1(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:session.PartySessionV1)
}

inline void PartySessionV1::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
join_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  join_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  created_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  updated_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(version_));
}

PartySessionV1::~PartySessionV1() {
  // @@protoc_insertion_point(destructor:session.PartySessionV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartySessionV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attributes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  join_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
}

void PartySessionV1::ArenaDtor(void* object) {
  PartySessionV1* _this = reinterpret_cast< PartySessionV1* >(object);
  (void)_this;
}
void PartySessionV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartySessionV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartySessionV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartySessionV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  id_.ClearToEmpty();
  namespace__.ClearToEmpty();
  attributes_.ClearToEmpty();
  join_type_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  leader_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartySessionV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.namespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .session.UserV1 members = 3 [json_name = "members"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attributes = 4 [json_name = "attributes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attributes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string join_type = 5 [json_name = "joinType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_join_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.join_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.created_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.updated_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 9 [json_name = "version"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader_id = 10 [json_name = "leaderID"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartySessionV1.leader_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartySessionV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartySessionV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // repeated .session.UserV1 members = 3 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  // bytes attributes = 4 [json_name = "attributes"];
  if (!this->_internal_attributes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_attributes(), target);
  }

  // string join_type = 5 [json_name = "joinType"];
  if (!this->_internal_join_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_join_type().data(), static_cast<int>(this->_internal_join_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.join_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_join_type(), target);
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.created_at");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_created_at(), target);
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.updated_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updated_at(), target);
  }

  // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::configuration(this), target, stream);
  }

  // int32 version = 9 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_version(), target);
  }

  // string leader_id = 10 [json_name = "leaderID"];
  if (!this->_internal_leader_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_id().data(), static_cast<int>(this->_internal_leader_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartySessionV1.leader_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartySessionV1)
  return target;
}

size_t PartySessionV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartySessionV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 3 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // bytes attributes = 4 [json_name = "attributes"];
  if (!this->_internal_attributes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attributes());
  }

  // string join_type = 5 [json_name = "joinType"];
  if (!this->_internal_join_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_join_type());
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string leader_id = 10 [json_name = "leaderID"];
  if (!this->_internal_leader_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_id());
  }

  // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // int32 version = 9 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartySessionV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartySessionV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartySessionV1::GetClassData() const { return &_class_data_; }

void PartySessionV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartySessionV1 *>(to)->MergeFrom(
      static_cast<const PartySessionV1 &>(from));
}


void PartySessionV1::MergeFrom(const PartySessionV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartySessionV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_attributes().empty()) {
    _internal_set_attributes(from._internal_attributes());
  }
  if (!from._internal_join_type().empty()) {
    _internal_set_join_type(from._internal_join_type());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_leader_id().empty()) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::session::SessionConfigV1::MergeFrom(from._internal_configuration());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartySessionV1::CopyFrom(const PartySessionV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartySessionV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartySessionV1::IsInitialized() const {
  return true;
}

void PartySessionV1::InternalSwap(PartySessionV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attributes_, lhs_arena,
      &other->attributes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &join_type_, lhs_arena,
      &other->join_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, lhs_arena,
      &other->created_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, lhs_arena,
      &other->updated_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leader_id_, lhs_arena,
      &other->leader_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartySessionV1, version_)
      + sizeof(PartySessionV1::version_)
      - PROTOBUF_FIELD_OFFSET(PartySessionV1, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartySessionV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[2]);
}

// ===================================================================

class SessionConfigV1::_Internal {
 public:
};

SessionConfigV1::SessionConfigV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.SessionConfigV1)
}
SessionConfigV1::SessionConfigV1(const SessionConfigV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  joinability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    joinability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_joinability().empty()) {
    joinability_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinability(), 
      GetArenaForAllocation());
  }
  deployment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deployment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deployment().empty()) {
    deployment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployment(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_players_, &from.min_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_players_) -
    reinterpret_cast<char*>(&min_players_)) + sizeof(max_players_));
  // @@protoc_insertion_point(copy_constructor:session.SessionConfigV1)
}

inline void SessionConfigV1::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
joinability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  joinability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deployment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deployment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_players_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_players_) -
    reinterpret_cast<char*>(&min_players_)) + sizeof(max_players_));
}

SessionConfigV1::~SessionConfigV1() {
  // @@protoc_insertion_point(destructor:session.SessionConfigV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionConfigV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinability_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deployment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionConfigV1::ArenaDtor(void* object) {
  SessionConfigV1* _this = reinterpret_cast< SessionConfigV1* >(object);
  (void)_this;
}
void SessionConfigV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionConfigV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionConfigV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.SessionConfigV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  joinability_.ClearToEmpty();
  deployment_.ClearToEmpty();
  ::memset(&min_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_players_) -
      reinterpret_cast<char*>(&min_players_)) + sizeof(max_players_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionConfigV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.SessionConfigV1.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string joinability = 2 [json_name = "joinability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_joinability();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.SessionConfigV1.joinability"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_players = 3 [json_name = "minPlayers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_players = 4 [json_name = "maxPlayers"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deployment = 5 [json_name = "deployment"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_deployment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.SessionConfigV1.deployment"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionConfigV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.SessionConfigV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.SessionConfigV1.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string joinability = 2 [json_name = "joinability"];
  if (!this->_internal_joinability().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joinability().data(), static_cast<int>(this->_internal_joinability().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.SessionConfigV1.joinability");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_joinability(), target);
  }

  // int32 min_players = 3 [json_name = "minPlayers"];
  if (this->_internal_min_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_players(), target);
  }

  // int32 max_players = 4 [json_name = "maxPlayers"];
  if (this->_internal_max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_players(), target);
  }

  // string deployment = 5 [json_name = "deployment"];
  if (!this->_internal_deployment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployment().data(), static_cast<int>(this->_internal_deployment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.SessionConfigV1.deployment");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_deployment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.SessionConfigV1)
  return target;
}

size_t SessionConfigV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.SessionConfigV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string joinability = 2 [json_name = "joinability"];
  if (!this->_internal_joinability().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joinability());
  }

  // string deployment = 5 [json_name = "deployment"];
  if (!this->_internal_deployment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployment());
  }

  // int32 min_players = 3 [json_name = "minPlayers"];
  if (this->_internal_min_players() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_players());
  }

  // int32 max_players = 4 [json_name = "maxPlayers"];
  if (this->_internal_max_players() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_players());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionConfigV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionConfigV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionConfigV1::GetClassData() const { return &_class_data_; }

void SessionConfigV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionConfigV1 *>(to)->MergeFrom(
      static_cast<const SessionConfigV1 &>(from));
}


void SessionConfigV1::MergeFrom(const SessionConfigV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.SessionConfigV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_joinability().empty()) {
    _internal_set_joinability(from._internal_joinability());
  }
  if (!from._internal_deployment().empty()) {
    _internal_set_deployment(from._internal_deployment());
  }
  if (from._internal_min_players() != 0) {
    _internal_set_min_players(from._internal_min_players());
  }
  if (from._internal_max_players() != 0) {
    _internal_set_max_players(from._internal_max_players());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionConfigV1::CopyFrom(const SessionConfigV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.SessionConfigV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionConfigV1::IsInitialized() const {
  return true;
}

void SessionConfigV1::InternalSwap(SessionConfigV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &joinability_, lhs_arena,
      &other->joinability_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deployment_, lhs_arena,
      &other->deployment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionConfigV1, max_players_)
      + sizeof(SessionConfigV1::max_players_)
      - PROTOBUF_FIELD_OFFSET(SessionConfigV1, min_players_)>(
          reinterpret_cast<char*>(&min_players_),
          reinterpret_cast<char*>(&other->min_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionConfigV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[3]);
}

// ===================================================================

class PartyNotificationUserJoinedV1::_Internal {
 public:
};

PartyNotificationUserJoinedV1::PartyNotificationUserJoinedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartyNotificationUserJoinedV1)
}
PartyNotificationUserJoinedV1::PartyNotificationUserJoinedV1(const PartyNotificationUserJoinedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.PartyNotificationUserJoinedV1)
}

inline void PartyNotificationUserJoinedV1::SharedCtor() {
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartyNotificationUserJoinedV1::~PartyNotificationUserJoinedV1() {
  // @@protoc_insertion_point(destructor:session.PartyNotificationUserJoinedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartyNotificationUserJoinedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNotificationUserJoinedV1::ArenaDtor(void* object) {
  PartyNotificationUserJoinedV1* _this = reinterpret_cast< PartyNotificationUserJoinedV1* >(object);
  (void)_this;
}
void PartyNotificationUserJoinedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNotificationUserJoinedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartyNotificationUserJoinedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartyNotificationUserJoinedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNotificationUserJoinedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .session.UserV1 members = 1 [json_name = "members"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string PartyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserJoinedV1.PartyID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartyNotificationUserJoinedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartyNotificationUserJoinedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserJoinedV1.PartyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartyNotificationUserJoinedV1)
  return target;
}

size_t PartyNotificationUserJoinedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartyNotificationUserJoinedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartyNotificationUserJoinedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartyNotificationUserJoinedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartyNotificationUserJoinedV1::GetClassData() const { return &_class_data_; }

void PartyNotificationUserJoinedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartyNotificationUserJoinedV1 *>(to)->MergeFrom(
      static_cast<const PartyNotificationUserJoinedV1 &>(from));
}


void PartyNotificationUserJoinedV1::MergeFrom(const PartyNotificationUserJoinedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartyNotificationUserJoinedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartyNotificationUserJoinedV1::CopyFrom(const PartyNotificationUserJoinedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartyNotificationUserJoinedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNotificationUserJoinedV1::IsInitialized() const {
  return true;
}

void PartyNotificationUserJoinedV1::InternalSwap(PartyNotificationUserJoinedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, lhs_arena,
      &other->partyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNotificationUserJoinedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[4]);
}

// ===================================================================

class PartyNotificationMembersChangedV1::_Internal {
 public:
};

PartyNotificationMembersChangedV1::PartyNotificationMembersChangedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartyNotificationMembersChangedV1)
}
PartyNotificationMembersChangedV1::PartyNotificationMembersChangedV1(const PartyNotificationMembersChangedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  joinerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    joinerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_joinerid().empty()) {
    joinerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinerid(), 
      GetArenaForAllocation());
  }
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leaderid().empty()) {
    leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.PartyNotificationMembersChangedV1)
}

inline void PartyNotificationMembersChangedV1::SharedCtor() {
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
joinerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  joinerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartyNotificationMembersChangedV1::~PartyNotificationMembersChangedV1() {
  // @@protoc_insertion_point(destructor:session.PartyNotificationMembersChangedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartyNotificationMembersChangedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNotificationMembersChangedV1::ArenaDtor(void* object) {
  PartyNotificationMembersChangedV1* _this = reinterpret_cast< PartyNotificationMembersChangedV1* >(object);
  (void)_this;
}
void PartyNotificationMembersChangedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNotificationMembersChangedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartyNotificationMembersChangedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartyNotificationMembersChangedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  partyid_.ClearToEmpty();
  joinerid_.ClearToEmpty();
  leaderid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNotificationMembersChangedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .session.UserV1 members = 1 [json_name = "members"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string PartyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationMembersChangedV1.PartyID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string JoinerID = 3 [json_name = "joinerID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_joinerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationMembersChangedV1.JoinerID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LeaderID = 4 [json_name = "leaderID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_leaderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationMembersChangedV1.LeaderID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartyNotificationMembersChangedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartyNotificationMembersChangedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationMembersChangedV1.PartyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // string JoinerID = 3 [json_name = "joinerID"];
  if (!this->_internal_joinerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joinerid().data(), static_cast<int>(this->_internal_joinerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationMembersChangedV1.JoinerID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_joinerid(), target);
  }

  // string LeaderID = 4 [json_name = "leaderID"];
  if (!this->_internal_leaderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderid().data(), static_cast<int>(this->_internal_leaderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationMembersChangedV1.LeaderID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartyNotificationMembersChangedV1)
  return target;
}

size_t PartyNotificationMembersChangedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartyNotificationMembersChangedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string JoinerID = 3 [json_name = "joinerID"];
  if (!this->_internal_joinerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joinerid());
  }

  // string LeaderID = 4 [json_name = "leaderID"];
  if (!this->_internal_leaderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartyNotificationMembersChangedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartyNotificationMembersChangedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartyNotificationMembersChangedV1::GetClassData() const { return &_class_data_; }

void PartyNotificationMembersChangedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartyNotificationMembersChangedV1 *>(to)->MergeFrom(
      static_cast<const PartyNotificationMembersChangedV1 &>(from));
}


void PartyNotificationMembersChangedV1::MergeFrom(const PartyNotificationMembersChangedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartyNotificationMembersChangedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (!from._internal_joinerid().empty()) {
    _internal_set_joinerid(from._internal_joinerid());
  }
  if (!from._internal_leaderid().empty()) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartyNotificationMembersChangedV1::CopyFrom(const PartyNotificationMembersChangedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartyNotificationMembersChangedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNotificationMembersChangedV1::IsInitialized() const {
  return true;
}

void PartyNotificationMembersChangedV1::InternalSwap(PartyNotificationMembersChangedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, lhs_arena,
      &other->partyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &joinerid_, lhs_arena,
      &other->joinerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leaderid_, lhs_arena,
      &other->leaderid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNotificationMembersChangedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[5]);
}

// ===================================================================

class PartyNotificationUserInvitedV1::_Internal {
 public:
};

PartyNotificationUserInvitedV1::PartyNotificationUserInvitedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartyNotificationUserInvitedV1)
}
PartyNotificationUserInvitedV1::PartyNotificationUserInvitedV1(const PartyNotificationUserInvitedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  senderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    senderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senderid().empty()) {
    senderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_senderid(), 
      GetArenaForAllocation());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.PartyNotificationUserInvitedV1)
}

inline void PartyNotificationUserInvitedV1::SharedCtor() {
senderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  senderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartyNotificationUserInvitedV1::~PartyNotificationUserInvitedV1() {
  // @@protoc_insertion_point(destructor:session.PartyNotificationUserInvitedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartyNotificationUserInvitedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  senderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNotificationUserInvitedV1::ArenaDtor(void* object) {
  PartyNotificationUserInvitedV1* _this = reinterpret_cast< PartyNotificationUserInvitedV1* >(object);
  (void)_this;
}
void PartyNotificationUserInvitedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNotificationUserInvitedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartyNotificationUserInvitedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartyNotificationUserInvitedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  senderid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNotificationUserInvitedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string senderID = 1 [json_name = "senderID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_senderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserInvitedV1.senderID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PartyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserInvitedV1.PartyID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartyNotificationUserInvitedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartyNotificationUserInvitedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string senderID = 1 [json_name = "senderID"];
  if (!this->_internal_senderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_senderid().data(), static_cast<int>(this->_internal_senderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserInvitedV1.senderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_senderid(), target);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserInvitedV1.PartyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartyNotificationUserInvitedV1)
  return target;
}

size_t PartyNotificationUserInvitedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartyNotificationUserInvitedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string senderID = 1 [json_name = "senderID"];
  if (!this->_internal_senderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_senderid());
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartyNotificationUserInvitedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartyNotificationUserInvitedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartyNotificationUserInvitedV1::GetClassData() const { return &_class_data_; }

void PartyNotificationUserInvitedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartyNotificationUserInvitedV1 *>(to)->MergeFrom(
      static_cast<const PartyNotificationUserInvitedV1 &>(from));
}


void PartyNotificationUserInvitedV1::MergeFrom(const PartyNotificationUserInvitedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartyNotificationUserInvitedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_senderid().empty()) {
    _internal_set_senderid(from._internal_senderid());
  }
  if (!from._internal_partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartyNotificationUserInvitedV1::CopyFrom(const PartyNotificationUserInvitedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartyNotificationUserInvitedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNotificationUserInvitedV1::IsInitialized() const {
  return true;
}

void PartyNotificationUserInvitedV1::InternalSwap(PartyNotificationUserInvitedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &senderid_, lhs_arena,
      &other->senderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, lhs_arena,
      &other->partyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNotificationUserInvitedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[6]);
}

// ===================================================================

class PartyNotificationUserRejectV1::_Internal {
 public:
};

PartyNotificationUserRejectV1::PartyNotificationUserRejectV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartyNotificationUserRejectV1)
}
PartyNotificationUserRejectV1::PartyNotificationUserRejectV1(const PartyNotificationUserRejectV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  rejectedid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rejectedid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rejectedid().empty()) {
    rejectedid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rejectedid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.PartyNotificationUserRejectV1)
}

inline void PartyNotificationUserRejectV1::SharedCtor() {
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rejectedid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rejectedid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartyNotificationUserRejectV1::~PartyNotificationUserRejectV1() {
  // @@protoc_insertion_point(destructor:session.PartyNotificationUserRejectV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartyNotificationUserRejectV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rejectedid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNotificationUserRejectV1::ArenaDtor(void* object) {
  PartyNotificationUserRejectV1* _this = reinterpret_cast< PartyNotificationUserRejectV1* >(object);
  (void)_this;
}
void PartyNotificationUserRejectV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNotificationUserRejectV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartyNotificationUserRejectV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartyNotificationUserRejectV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  partyid_.ClearToEmpty();
  rejectedid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNotificationUserRejectV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .session.UserV1 members = 1 [json_name = "members"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string PartyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserRejectV1.PartyID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RejectedID = 3 [json_name = "rejectedID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rejectedid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserRejectV1.RejectedID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartyNotificationUserRejectV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartyNotificationUserRejectV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserRejectV1.PartyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // string RejectedID = 3 [json_name = "rejectedID"];
  if (!this->_internal_rejectedid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rejectedid().data(), static_cast<int>(this->_internal_rejectedid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserRejectV1.RejectedID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rejectedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartyNotificationUserRejectV1)
  return target;
}

size_t PartyNotificationUserRejectV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartyNotificationUserRejectV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string PartyID = 2 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string RejectedID = 3 [json_name = "rejectedID"];
  if (!this->_internal_rejectedid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rejectedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartyNotificationUserRejectV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartyNotificationUserRejectV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartyNotificationUserRejectV1::GetClassData() const { return &_class_data_; }

void PartyNotificationUserRejectV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartyNotificationUserRejectV1 *>(to)->MergeFrom(
      static_cast<const PartyNotificationUserRejectV1 &>(from));
}


void PartyNotificationUserRejectV1::MergeFrom(const PartyNotificationUserRejectV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartyNotificationUserRejectV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (!from._internal_rejectedid().empty()) {
    _internal_set_rejectedid(from._internal_rejectedid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartyNotificationUserRejectV1::CopyFrom(const PartyNotificationUserRejectV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartyNotificationUserRejectV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNotificationUserRejectV1::IsInitialized() const {
  return true;
}

void PartyNotificationUserRejectV1::InternalSwap(PartyNotificationUserRejectV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, lhs_arena,
      &other->partyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rejectedid_, lhs_arena,
      &other->rejectedid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNotificationUserRejectV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[7]);
}

// ===================================================================

class PartyNotificationUserKickedV1::_Internal {
 public:
};

PartyNotificationUserKickedV1::PartyNotificationUserKickedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.PartyNotificationUserKickedV1)
}
PartyNotificationUserKickedV1::PartyNotificationUserKickedV1(const PartyNotificationUserKickedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.PartyNotificationUserKickedV1)
}

inline void PartyNotificationUserKickedV1::SharedCtor() {
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartyNotificationUserKickedV1::~PartyNotificationUserKickedV1() {
  // @@protoc_insertion_point(destructor:session.PartyNotificationUserKickedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartyNotificationUserKickedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNotificationUserKickedV1::ArenaDtor(void* object) {
  PartyNotificationUserKickedV1* _this = reinterpret_cast< PartyNotificationUserKickedV1* >(object);
  (void)_this;
}
void PartyNotificationUserKickedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNotificationUserKickedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartyNotificationUserKickedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.PartyNotificationUserKickedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNotificationUserKickedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PartyID = 1 [json_name = "partyID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.PartyNotificationUserKickedV1.PartyID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartyNotificationUserKickedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.PartyNotificationUserKickedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PartyID = 1 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.PartyNotificationUserKickedV1.PartyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.PartyNotificationUserKickedV1)
  return target;
}

size_t PartyNotificationUserKickedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.PartyNotificationUserKickedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PartyID = 1 [json_name = "partyID"];
  if (!this->_internal_partyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartyNotificationUserKickedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartyNotificationUserKickedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartyNotificationUserKickedV1::GetClassData() const { return &_class_data_; }

void PartyNotificationUserKickedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartyNotificationUserKickedV1 *>(to)->MergeFrom(
      static_cast<const PartyNotificationUserKickedV1 &>(from));
}


void PartyNotificationUserKickedV1::MergeFrom(const PartyNotificationUserKickedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.PartyNotificationUserKickedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartyNotificationUserKickedV1::CopyFrom(const PartyNotificationUserKickedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.PartyNotificationUserKickedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNotificationUserKickedV1::IsInitialized() const {
  return true;
}

void PartyNotificationUserKickedV1::InternalSwap(PartyNotificationUserKickedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, lhs_arena,
      &other->partyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNotificationUserKickedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[8]);
}

// ===================================================================

class GameSessionNotificationUserInvitedV1::_Internal {
 public:
};

GameSessionNotificationUserInvitedV1::GameSessionNotificationUserInvitedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameSessionNotificationUserInvitedV1)
}
GameSessionNotificationUserInvitedV1::GameSessionNotificationUserInvitedV1(const GameSessionNotificationUserInvitedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.GameSessionNotificationUserInvitedV1)
}

inline void GameSessionNotificationUserInvitedV1::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameSessionNotificationUserInvitedV1::~GameSessionNotificationUserInvitedV1() {
  // @@protoc_insertion_point(destructor:session.GameSessionNotificationUserInvitedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameSessionNotificationUserInvitedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionNotificationUserInvitedV1::ArenaDtor(void* object) {
  GameSessionNotificationUserInvitedV1* _this = reinterpret_cast< GameSessionNotificationUserInvitedV1* >(object);
  (void)_this;
}
void GameSessionNotificationUserInvitedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionNotificationUserInvitedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSessionNotificationUserInvitedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameSessionNotificationUserInvitedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionNotificationUserInvitedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SessionID = 1 [json_name = "SessionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionNotificationUserInvitedV1.SessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSessionNotificationUserInvitedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameSessionNotificationUserInvitedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SessionID = 1 [json_name = "SessionID"];
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionNotificationUserInvitedV1.SessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameSessionNotificationUserInvitedV1)
  return target;
}

size_t GameSessionNotificationUserInvitedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameSessionNotificationUserInvitedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionID = 1 [json_name = "SessionID"];
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSessionNotificationUserInvitedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameSessionNotificationUserInvitedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSessionNotificationUserInvitedV1::GetClassData() const { return &_class_data_; }

void GameSessionNotificationUserInvitedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameSessionNotificationUserInvitedV1 *>(to)->MergeFrom(
      static_cast<const GameSessionNotificationUserInvitedV1 &>(from));
}


void GameSessionNotificationUserInvitedV1::MergeFrom(const GameSessionNotificationUserInvitedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameSessionNotificationUserInvitedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSessionNotificationUserInvitedV1::CopyFrom(const GameSessionNotificationUserInvitedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameSessionNotificationUserInvitedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionNotificationUserInvitedV1::IsInitialized() const {
  return true;
}

void GameSessionNotificationUserInvitedV1::InternalSwap(GameSessionNotificationUserInvitedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionNotificationUserInvitedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[9]);
}

// ===================================================================

class GameSessionNotificationUserJoinedV1::_Internal {
 public:
};

GameSessionNotificationUserJoinedV1::GameSessionNotificationUserJoinedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameSessionNotificationUserJoinedV1)
}
GameSessionNotificationUserJoinedV1::GameSessionNotificationUserJoinedV1(const GameSessionNotificationUserJoinedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.GameSessionNotificationUserJoinedV1)
}

inline void GameSessionNotificationUserJoinedV1::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameSessionNotificationUserJoinedV1::~GameSessionNotificationUserJoinedV1() {
  // @@protoc_insertion_point(destructor:session.GameSessionNotificationUserJoinedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameSessionNotificationUserJoinedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionNotificationUserJoinedV1::ArenaDtor(void* object) {
  GameSessionNotificationUserJoinedV1* _this = reinterpret_cast< GameSessionNotificationUserJoinedV1* >(object);
  (void)_this;
}
void GameSessionNotificationUserJoinedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionNotificationUserJoinedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSessionNotificationUserJoinedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameSessionNotificationUserJoinedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  sessionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionNotificationUserJoinedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SessionID = 1 [json_name = "SessionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionNotificationUserJoinedV1.SessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .session.UserV1 members = 2 [json_name = "members"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSessionNotificationUserJoinedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameSessionNotificationUserJoinedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SessionID = 1 [json_name = "SessionID"];
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionNotificationUserJoinedV1.SessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // repeated .session.UserV1 members = 2 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameSessionNotificationUserJoinedV1)
  return target;
}

size_t GameSessionNotificationUserJoinedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameSessionNotificationUserJoinedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 2 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SessionID = 1 [json_name = "SessionID"];
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSessionNotificationUserJoinedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameSessionNotificationUserJoinedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSessionNotificationUserJoinedV1::GetClassData() const { return &_class_data_; }

void GameSessionNotificationUserJoinedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameSessionNotificationUserJoinedV1 *>(to)->MergeFrom(
      static_cast<const GameSessionNotificationUserJoinedV1 &>(from));
}


void GameSessionNotificationUserJoinedV1::MergeFrom(const GameSessionNotificationUserJoinedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameSessionNotificationUserJoinedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSessionNotificationUserJoinedV1::CopyFrom(const GameSessionNotificationUserJoinedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameSessionNotificationUserJoinedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionNotificationUserJoinedV1::IsInitialized() const {
  return true;
}

void GameSessionNotificationUserJoinedV1::InternalSwap(GameSessionNotificationUserJoinedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionNotificationUserJoinedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[10]);
}

// ===================================================================

class GameSessionNotificationMembersChangedV1::_Internal {
 public:
};

GameSessionNotificationMembersChangedV1::GameSessionNotificationMembersChangedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameSessionNotificationMembersChangedV1)
}
GameSessionNotificationMembersChangedV1::GameSessionNotificationMembersChangedV1(const GameSessionNotificationMembersChangedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  joinerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    joinerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_joinerid().empty()) {
    joinerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.GameSessionNotificationMembersChangedV1)
}

inline void GameSessionNotificationMembersChangedV1::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
joinerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  joinerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameSessionNotificationMembersChangedV1::~GameSessionNotificationMembersChangedV1() {
  // @@protoc_insertion_point(destructor:session.GameSessionNotificationMembersChangedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameSessionNotificationMembersChangedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionNotificationMembersChangedV1::ArenaDtor(void* object) {
  GameSessionNotificationMembersChangedV1* _this = reinterpret_cast< GameSessionNotificationMembersChangedV1* >(object);
  (void)_this;
}
void GameSessionNotificationMembersChangedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionNotificationMembersChangedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSessionNotificationMembersChangedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameSessionNotificationMembersChangedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  sessionid_.ClearToEmpty();
  joinerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionNotificationMembersChangedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .session.UserV1 members = 1 [json_name = "members"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string SessionID = 2 [json_name = "sessionID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionNotificationMembersChangedV1.SessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string JoinerID = 3 [json_name = "joinerID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_joinerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionNotificationMembersChangedV1.JoinerID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSessionNotificationMembersChangedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameSessionNotificationMembersChangedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // string SessionID = 2 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionNotificationMembersChangedV1.SessionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessionid(), target);
  }

  // string JoinerID = 3 [json_name = "joinerID"];
  if (!this->_internal_joinerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joinerid().data(), static_cast<int>(this->_internal_joinerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionNotificationMembersChangedV1.JoinerID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_joinerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameSessionNotificationMembersChangedV1)
  return target;
}

size_t GameSessionNotificationMembersChangedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameSessionNotificationMembersChangedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 1 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SessionID = 2 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string JoinerID = 3 [json_name = "joinerID"];
  if (!this->_internal_joinerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joinerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSessionNotificationMembersChangedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameSessionNotificationMembersChangedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSessionNotificationMembersChangedV1::GetClassData() const { return &_class_data_; }

void GameSessionNotificationMembersChangedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameSessionNotificationMembersChangedV1 *>(to)->MergeFrom(
      static_cast<const GameSessionNotificationMembersChangedV1 &>(from));
}


void GameSessionNotificationMembersChangedV1::MergeFrom(const GameSessionNotificationMembersChangedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameSessionNotificationMembersChangedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_joinerid().empty()) {
    _internal_set_joinerid(from._internal_joinerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSessionNotificationMembersChangedV1::CopyFrom(const GameSessionNotificationMembersChangedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameSessionNotificationMembersChangedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionNotificationMembersChangedV1::IsInitialized() const {
  return true;
}

void GameSessionNotificationMembersChangedV1::InternalSwap(GameSessionNotificationMembersChangedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &joinerid_, lhs_arena,
      &other->joinerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionNotificationMembersChangedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[11]);
}

// ===================================================================

class DSStatusChangedNotificationV1::_Internal {
 public:
  static const ::session::GameServerV1& gameserver(const DSStatusChangedNotificationV1* msg);
};

const ::session::GameServerV1&
DSStatusChangedNotificationV1::_Internal::gameserver(const DSStatusChangedNotificationV1* msg) {
  return *msg->gameserver_;
}
DSStatusChangedNotificationV1::DSStatusChangedNotificationV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.DSStatusChangedNotificationV1)
}
DSStatusChangedNotificationV1::DSStatusChangedNotificationV1(const DSStatusChangedNotificationV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gameserver()) {
    gameserver_ = new ::session::GameServerV1(*from.gameserver_);
  } else {
    gameserver_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:session.DSStatusChangedNotificationV1)
}

inline void DSStatusChangedNotificationV1::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gameserver_ = nullptr;
}

DSStatusChangedNotificationV1::~DSStatusChangedNotificationV1() {
  // @@protoc_insertion_point(destructor:session.DSStatusChangedNotificationV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DSStatusChangedNotificationV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameserver_;
}

void DSStatusChangedNotificationV1::ArenaDtor(void* object) {
  DSStatusChangedNotificationV1* _this = reinterpret_cast< DSStatusChangedNotificationV1* >(object);
  (void)_this;
}
void DSStatusChangedNotificationV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSStatusChangedNotificationV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DSStatusChangedNotificationV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.DSStatusChangedNotificationV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gameserver_ != nullptr) {
    delete gameserver_;
  }
  gameserver_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSStatusChangedNotificationV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SessionID = 2 [json_name = "sessionID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.DSStatusChangedNotificationV1.SessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Error = 3 [json_name = "error"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.DSStatusChangedNotificationV1.Error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DSStatusChangedNotificationV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.DSStatusChangedNotificationV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
  if (this->_internal_has_gameserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gameserver(this), target, stream);
  }

  // string SessionID = 2 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.DSStatusChangedNotificationV1.SessionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessionid(), target);
  }

  // string Error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.DSStatusChangedNotificationV1.Error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.DSStatusChangedNotificationV1)
  return target;
}

size_t DSStatusChangedNotificationV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.DSStatusChangedNotificationV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionID = 2 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string Error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
  if (this->_internal_has_gameserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameserver_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DSStatusChangedNotificationV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DSStatusChangedNotificationV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DSStatusChangedNotificationV1::GetClassData() const { return &_class_data_; }

void DSStatusChangedNotificationV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DSStatusChangedNotificationV1 *>(to)->MergeFrom(
      static_cast<const DSStatusChangedNotificationV1 &>(from));
}


void DSStatusChangedNotificationV1::MergeFrom(const DSStatusChangedNotificationV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.DSStatusChangedNotificationV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_has_gameserver()) {
    _internal_mutable_gameserver()->::session::GameServerV1::MergeFrom(from._internal_gameserver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DSStatusChangedNotificationV1::CopyFrom(const DSStatusChangedNotificationV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.DSStatusChangedNotificationV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSStatusChangedNotificationV1::IsInitialized() const {
  return true;
}

void DSStatusChangedNotificationV1::InternalSwap(DSStatusChangedNotificationV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(gameserver_, other->gameserver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSStatusChangedNotificationV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[12]);
}

// ===================================================================

class UserIDs::_Internal {
 public:
};

UserIDs::UserIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  userid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.UserIDs)
}
UserIDs::UserIDs(const UserIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      userid_(from.userid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:session.UserIDs)
}

inline void UserIDs::SharedCtor() {
}

UserIDs::~UserIDs() {
  // @@protoc_insertion_point(destructor:session.UserIDs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserIDs::ArenaDtor(void* object) {
  UserIDs* _this = reinterpret_cast< UserIDs* >(object);
  (void)_this;
}
void UserIDs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserIDs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:session.UserIDs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIDs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string userID = 1 [json_name = "user_ids"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_userid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.UserIDs.userID"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIDs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.UserIDs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string userID = 1 [json_name = "user_ids"];
  for (int i = 0, n = this->_internal_userid_size(); i < n; i++) {
    const auto& s = this->_internal_userid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.UserIDs.userID");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.UserIDs)
  return target;
}

size_t UserIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.UserIDs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string userID = 1 [json_name = "user_ids"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(userid_.size());
  for (int i = 0, n = userid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      userid_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIDs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserIDs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIDs::GetClassData() const { return &_class_data_; }

void UserIDs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserIDs *>(to)->MergeFrom(
      static_cast<const UserIDs &>(from));
}


void UserIDs::MergeFrom(const UserIDs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.UserIDs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  userid_.MergeFrom(from.userid_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIDs::CopyFrom(const UserIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.UserIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIDs::IsInitialized() const {
  return true;
}

void UserIDs::InternalSwap(UserIDs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  userid_.InternalSwap(&other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIDs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[13]);
}

// ===================================================================

class Team::_Internal {
 public:
};

Team::Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.Team)
}
Team::Team(const Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:session.Team)
}

inline void Team::SharedCtor() {
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:session.Team)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Team::ArenaDtor(void* object) {
  Team* _this = reinterpret_cast< Team* >(object);
  (void)_this;
}
void Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Team::Clear() {
// @@protoc_insertion_point(message_clear_start:session.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string user_ids = 1 [json_name = "user_ids"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.Team.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user_ids = 1 [json_name = "user_ids"];
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.Team.user_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.Team)
  return target;
}

size_t Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 1 [json_name = "user_ids"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Team::GetClassData() const { return &_class_data_; }

void Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Team *>(to)->MergeFrom(
      static_cast<const Team &>(from));
}


void Team::MergeFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.Team)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Team::CopyFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  return true;
}

void Team::InternalSwap(Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Team::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[14]);
}

// ===================================================================

class GameSessionV1::_Internal {
 public:
  static const ::session::SessionConfigV1& configuration(const GameSessionV1* msg);
  static const ::session::DSInformationV1& dsinformationv1(const GameSessionV1* msg);
};

const ::session::SessionConfigV1&
GameSessionV1::_Internal::configuration(const GameSessionV1* msg) {
  return *msg->configuration_;
}
const ::session::DSInformationV1&
GameSessionV1::_Internal::dsinformationv1(const GameSessionV1* msg) {
  return *msg->dsinformationv1_;
}
GameSessionV1::GameSessionV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  teams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameSessionV1)
}
GameSessionV1::GameSessionV1(const GameSessionV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attributes().empty()) {
    attributes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes(), 
      GetArenaForAllocation());
  }
  join_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    join_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_join_type().empty()) {
    join_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_join_type(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    created_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    updated_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  match_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_match_pool().empty()) {
    match_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_pool(), 
      GetArenaForAllocation());
  }
  game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_mode().empty()) {
    game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_mode(), 
      GetArenaForAllocation());
  }
  backfill_ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    backfill_ticket_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backfill_ticket_id().empty()) {
    backfill_ticket_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_backfill_ticket_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::session::SessionConfigV1(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_dsinformationv1()) {
    dsinformationv1_ = new ::session::DSInformationV1(*from.dsinformationv1_);
  } else {
    dsinformationv1_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:session.GameSessionV1)
}

inline void GameSessionV1::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attributes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attributes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
join_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  join_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  created_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  updated_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
match_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
backfill_ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  backfill_ticket_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(version_));
}

GameSessionV1::~GameSessionV1() {
  // @@protoc_insertion_point(destructor:session.GameSessionV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameSessionV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attributes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  join_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backfill_ticket_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete dsinformationv1_;
}

void GameSessionV1::ArenaDtor(void* object) {
  GameSessionV1* _this = reinterpret_cast< GameSessionV1* >(object);
  (void)_this;
}
void GameSessionV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSessionV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameSessionV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  teams_.Clear();
  id_.ClearToEmpty();
  namespace__.ClearToEmpty();
  attributes_.ClearToEmpty();
  join_type_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  match_pool_.ClearToEmpty();
  game_mode_.ClearToEmpty();
  backfill_ticket_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dsinformationv1_ != nullptr) {
    delete dsinformationv1_;
  }
  dsinformationv1_ = nullptr;
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.namespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .session.UserV1 members = 3 [json_name = "members"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attributes = 4 [json_name = "attributes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attributes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string join_type = 5 [json_name = "joinType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_join_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.join_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.created_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.updated_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 9 [json_name = "version"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string match_pool = 10 [json_name = "match_pool"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_match_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.match_pool"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string game_mode = 11 [json_name = "game_mode"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.game_mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string backfill_ticket_id = 12 [json_name = "backfill_ticket_id"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_backfill_ticket_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionV1.backfill_ticket_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .session.Team teams = 13 [json_name = "teams"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .session.DSInformationV1 DSInformationV1 = 14 [json_name = "ds_information"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsinformationv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSessionV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameSessionV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // repeated .session.UserV1 members = 3 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  // bytes attributes = 4 [json_name = "attributes"];
  if (!this->_internal_attributes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_attributes(), target);
  }

  // string join_type = 5 [json_name = "joinType"];
  if (!this->_internal_join_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_join_type().data(), static_cast<int>(this->_internal_join_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.join_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_join_type(), target);
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.created_at");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_created_at(), target);
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.updated_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updated_at(), target);
  }

  // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::configuration(this), target, stream);
  }

  // int32 version = 9 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_version(), target);
  }

  // string match_pool = 10 [json_name = "match_pool"];
  if (!this->_internal_match_pool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_pool().data(), static_cast<int>(this->_internal_match_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.match_pool");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_match_pool(), target);
  }

  // string game_mode = 11 [json_name = "game_mode"];
  if (!this->_internal_game_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_mode().data(), static_cast<int>(this->_internal_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.game_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_game_mode(), target);
  }

  // string backfill_ticket_id = 12 [json_name = "backfill_ticket_id"];
  if (!this->_internal_backfill_ticket_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backfill_ticket_id().data(), static_cast<int>(this->_internal_backfill_ticket_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionV1.backfill_ticket_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_backfill_ticket_id(), target);
  }

  // repeated .session.Team teams = 13 [json_name = "teams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_teams(i), target, stream);
  }

  // .session.DSInformationV1 DSInformationV1 = 14 [json_name = "ds_information"];
  if (this->_internal_has_dsinformationv1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::dsinformationv1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameSessionV1)
  return target;
}

size_t GameSessionV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameSessionV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .session.UserV1 members = 3 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .session.Team teams = 13 [json_name = "teams"];
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // bytes attributes = 4 [json_name = "attributes"];
  if (!this->_internal_attributes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attributes());
  }

  // string join_type = 5 [json_name = "joinType"];
  if (!this->_internal_join_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_join_type());
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string match_pool = 10 [json_name = "match_pool"];
  if (!this->_internal_match_pool().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_pool());
  }

  // string game_mode = 11 [json_name = "game_mode"];
  if (!this->_internal_game_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_mode());
  }

  // string backfill_ticket_id = 12 [json_name = "backfill_ticket_id"];
  if (!this->_internal_backfill_ticket_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backfill_ticket_id());
  }

  // .session.SessionConfigV1 configuration = 8 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .session.DSInformationV1 DSInformationV1 = 14 [json_name = "ds_information"];
  if (this->_internal_has_dsinformationv1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dsinformationv1_);
  }

  // int32 version = 9 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSessionV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameSessionV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSessionV1::GetClassData() const { return &_class_data_; }

void GameSessionV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameSessionV1 *>(to)->MergeFrom(
      static_cast<const GameSessionV1 &>(from));
}


void GameSessionV1::MergeFrom(const GameSessionV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameSessionV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  teams_.MergeFrom(from.teams_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_attributes().empty()) {
    _internal_set_attributes(from._internal_attributes());
  }
  if (!from._internal_join_type().empty()) {
    _internal_set_join_type(from._internal_join_type());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_match_pool().empty()) {
    _internal_set_match_pool(from._internal_match_pool());
  }
  if (!from._internal_game_mode().empty()) {
    _internal_set_game_mode(from._internal_game_mode());
  }
  if (!from._internal_backfill_ticket_id().empty()) {
    _internal_set_backfill_ticket_id(from._internal_backfill_ticket_id());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::session::SessionConfigV1::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_dsinformationv1()) {
    _internal_mutable_dsinformationv1()->::session::DSInformationV1::MergeFrom(from._internal_dsinformationv1());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSessionV1::CopyFrom(const GameSessionV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameSessionV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionV1::IsInitialized() const {
  return true;
}

void GameSessionV1::InternalSwap(GameSessionV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  teams_.InternalSwap(&other->teams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attributes_, lhs_arena,
      &other->attributes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &join_type_, lhs_arena,
      &other->join_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, lhs_arena,
      &other->created_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, lhs_arena,
      &other->updated_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_pool_, lhs_arena,
      &other->match_pool_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_mode_, lhs_arena,
      &other->game_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &backfill_ticket_id_, lhs_arena,
      &other->backfill_ticket_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameSessionV1, version_)
      + sizeof(GameSessionV1::version_)
      - PROTOBUF_FIELD_OFFSET(GameSessionV1, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[15]);
}

// ===================================================================

class DSInformationV1::_Internal {
 public:
  static const ::session::GameServerV1& gameserver(const DSInformationV1* msg);
};

const ::session::GameServerV1&
DSInformationV1::_Internal::gameserver(const DSInformationV1* msg) {
  return *msg->gameserver_;
}
DSInformationV1::DSInformationV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requested_regions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.DSInformationV1)
}
DSInformationV1::DSInformationV1(const DSInformationV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requested_regions_(from.requested_regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requested_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    requested_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requested_at().empty()) {
    requested_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requested_at(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gameserver()) {
    gameserver_ = new ::session::GameServerV1(*from.gameserver_);
  } else {
    gameserver_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:session.DSInformationV1)
}

inline void DSInformationV1::SharedCtor() {
requested_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  requested_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gameserver_ = nullptr;
}

DSInformationV1::~DSInformationV1() {
  // @@protoc_insertion_point(destructor:session.DSInformationV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DSInformationV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  requested_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameserver_;
}

void DSInformationV1::ArenaDtor(void* object) {
  DSInformationV1* _this = reinterpret_cast< DSInformationV1* >(object);
  (void)_this;
}
void DSInformationV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSInformationV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DSInformationV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.DSInformationV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requested_regions_.Clear();
  requested_at_.ClearToEmpty();
  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gameserver_ != nullptr) {
    delete gameserver_;
  }
  gameserver_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSInformationV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string requested_regions = 2 [json_name = "requested_regions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requested_regions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.DSInformationV1.requested_regions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string requested_at = 3 [json_name = "requested_at"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requested_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.DSInformationV1.requested_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 5 [json_name = "status"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.DSInformationV1.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DSInformationV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.DSInformationV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
  if (this->_internal_has_gameserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gameserver(this), target, stream);
  }

  // repeated string requested_regions = 2 [json_name = "requested_regions"];
  for (int i = 0, n = this->_internal_requested_regions_size(); i < n; i++) {
    const auto& s = this->_internal_requested_regions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.DSInformationV1.requested_regions");
    target = stream->WriteString(2, s, target);
  }

  // string requested_at = 3 [json_name = "requested_at"];
  if (!this->_internal_requested_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requested_at().data(), static_cast<int>(this->_internal_requested_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.DSInformationV1.requested_at");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requested_at(), target);
  }

  // string status = 5 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.DSInformationV1.status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.DSInformationV1)
  return target;
}

size_t DSInformationV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.DSInformationV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requested_regions = 2 [json_name = "requested_regions"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requested_regions_.size());
  for (int i = 0, n = requested_regions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requested_regions_.Get(i));
  }

  // string requested_at = 3 [json_name = "requested_at"];
  if (!this->_internal_requested_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requested_at());
  }

  // string status = 5 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .session.GameServerV1 GameServer = 1 [json_name = "game_server"];
  if (this->_internal_has_gameserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameserver_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DSInformationV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DSInformationV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DSInformationV1::GetClassData() const { return &_class_data_; }

void DSInformationV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DSInformationV1 *>(to)->MergeFrom(
      static_cast<const DSInformationV1 &>(from));
}


void DSInformationV1::MergeFrom(const DSInformationV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.DSInformationV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requested_regions_.MergeFrom(from.requested_regions_);
  if (!from._internal_requested_at().empty()) {
    _internal_set_requested_at(from._internal_requested_at());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_gameserver()) {
    _internal_mutable_gameserver()->::session::GameServerV1::MergeFrom(from._internal_gameserver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DSInformationV1::CopyFrom(const DSInformationV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.DSInformationV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSInformationV1::IsInitialized() const {
  return true;
}

void DSInformationV1::InternalSwap(DSInformationV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requested_regions_.InternalSwap(&other->requested_regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &requested_at_, lhs_arena,
      &other->requested_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  swap(gameserver_, other->gameserver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSInformationV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[16]);
}

// ===================================================================

GameServerV1_PortsEntry_DoNotUse::GameServerV1_PortsEntry_DoNotUse() {}
GameServerV1_PortsEntry_DoNotUse::GameServerV1_PortsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GameServerV1_PortsEntry_DoNotUse::MergeFrom(const GameServerV1_PortsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GameServerV1_PortsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[17]);
}

// ===================================================================

class GameServerV1::_Internal {
 public:
};

GameServerV1::GameServerV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alternate_ips_(arena),
  ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameServerV1)
}
GameServerV1::GameServerV1(const GameServerV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternate_ips_(from.alternate_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ports_.MergeFrom(from.ports_);
  pod_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pod_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pod_name().empty()) {
    pod_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_name(), 
      GetArenaForAllocation());
  }
  image_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_version().empty()) {
    image_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_version(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArenaForAllocation());
  }
  game_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_version().empty()) {
    game_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_version(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  deployment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deployment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deployment().empty()) {
    deployment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployment(), 
      GetArenaForAllocation());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArenaForAllocation());
  }
  custom_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom_attribute().empty()) {
    custom_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_attribute(), 
      GetArenaForAllocation());
  }
  last_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_update_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_update().empty()) {
    last_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_update(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_override_game_version_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_override_game_version_));
  // @@protoc_insertion_point(copy_constructor:session.GameServerV1)
}

inline void GameServerV1::SharedCtor() {
pod_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pod_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deployment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deployment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
custom_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_update_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_override_game_version_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_override_game_version_));
}

GameServerV1::~GameServerV1() {
  // @@protoc_insertion_point(destructor:session.GameServerV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameServerV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pod_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deployment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerV1::ArenaDtor(void* object) {
  GameServerV1* _this = reinterpret_cast< GameServerV1* >(object);
  (void)_this;
  _this->ports_. ~MapField();
}
inline void GameServerV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GameServerV1::ArenaDtor);
  }
}
void GameServerV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameServerV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternate_ips_.Clear();
  ports_.Clear();
  pod_name_.ClearToEmpty();
  image_version_.ClearToEmpty();
  namespace__.ClearToEmpty();
  ip_.ClearToEmpty();
  protocol_.ClearToEmpty();
  provider_.ClearToEmpty();
  game_version_.ClearToEmpty();
  status_.ClearToEmpty();
  session_id_.ClearToEmpty();
  deployment_.ClearToEmpty();
  region_.ClearToEmpty();
  custom_attribute_.ClearToEmpty();
  last_update_.ClearToEmpty();
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_override_game_version_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_override_game_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pod_name = 1 [json_name = "pod_name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pod_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.pod_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string image_version = 2 [json_name = "image_version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.image_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string namespace = 3 [json_name = "namespace"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.namespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 4 [json_name = "ip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string alternate_ips = 5 [json_name = "alternate_ips"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alternate_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.alternate_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 6 [json_name = "port"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 7 [json_name = "protocol"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.protocol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> ports = 8 [json_name = "ports"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ports_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string provider = 9 [json_name = "provider"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.provider"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string game_version = 10 [json_name = "game_version"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_game_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.game_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 11 [json_name = "status"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 12 [json_name = "session_id"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deployment = 13 [json_name = "deployment"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_deployment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.deployment"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 14 [json_name = "region"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.region"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string custom_attribute = 15 [json_name = "custom_attribute"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_custom_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.custom_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_override_game_version = 16 [json_name = "is_override_game_version"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          is_override_game_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_update = 17 [json_name = "last_update"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_last_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameServerV1.last_update"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameServerV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameServerV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_name = 1 [json_name = "pod_name"];
  if (!this->_internal_pod_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_name().data(), static_cast<int>(this->_internal_pod_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.pod_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_name(), target);
  }

  // string image_version = 2 [json_name = "image_version"];
  if (!this->_internal_image_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_version().data(), static_cast<int>(this->_internal_image_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.image_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_version(), target);
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // string ip = 4 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // repeated string alternate_ips = 5 [json_name = "alternate_ips"];
  for (int i = 0, n = this->_internal_alternate_ips_size(); i < n; i++) {
    const auto& s = this->_internal_alternate_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.alternate_ips");
    target = stream->WriteString(5, s, target);
  }

  // int32 port = 6 [json_name = "port"];
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_port(), target);
  }

  // string protocol = 7 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.protocol");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_protocol(), target);
  }

  // map<string, int32> ports = 8 [json_name = "ports"];
  if (!this->_internal_ports().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "session.GameServerV1.PortsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ports().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ports().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_ports().begin();
          it != this->_internal_ports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GameServerV1_PortsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_ports().begin();
          it != this->_internal_ports().end(); ++it) {
        target = GameServerV1_PortsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string provider = 9 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.provider");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_provider(), target);
  }

  // string game_version = 10 [json_name = "game_version"];
  if (!this->_internal_game_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_version().data(), static_cast<int>(this->_internal_game_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.game_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_game_version(), target);
  }

  // string status = 11 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.status");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_status(), target);
  }

  // string session_id = 12 [json_name = "session_id"];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.session_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_session_id(), target);
  }

  // string deployment = 13 [json_name = "deployment"];
  if (!this->_internal_deployment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployment().data(), static_cast<int>(this->_internal_deployment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.deployment");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_deployment(), target);
  }

  // string region = 14 [json_name = "region"];
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.region");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_region(), target);
  }

  // string custom_attribute = 15 [json_name = "custom_attribute"];
  if (!this->_internal_custom_attribute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_attribute().data(), static_cast<int>(this->_internal_custom_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.custom_attribute");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_attribute(), target);
  }

  // bool is_override_game_version = 16 [json_name = "is_override_game_version"];
  if (this->_internal_is_override_game_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_override_game_version(), target);
  }

  // string last_update = 17 [json_name = "last_update"];
  if (!this->_internal_last_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_update().data(), static_cast<int>(this->_internal_last_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameServerV1.last_update");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_last_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameServerV1)
  return target;
}

size_t GameServerV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameServerV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alternate_ips = 5 [json_name = "alternate_ips"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternate_ips_.size());
  for (int i = 0, n = alternate_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternate_ips_.Get(i));
  }

  // map<string, int32> ports = 8 [json_name = "ports"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ports_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_ports().begin();
      it != this->_internal_ports().end(); ++it) {
    total_size += GameServerV1_PortsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pod_name = 1 [json_name = "pod_name"];
  if (!this->_internal_pod_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_name());
  }

  // string image_version = 2 [json_name = "image_version"];
  if (!this->_internal_image_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_version());
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string ip = 4 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string protocol = 7 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string provider = 9 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // string game_version = 10 [json_name = "game_version"];
  if (!this->_internal_game_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_version());
  }

  // string status = 11 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string session_id = 12 [json_name = "session_id"];
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string deployment = 13 [json_name = "deployment"];
  if (!this->_internal_deployment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployment());
  }

  // string region = 14 [json_name = "region"];
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string custom_attribute = 15 [json_name = "custom_attribute"];
  if (!this->_internal_custom_attribute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_attribute());
  }

  // string last_update = 17 [json_name = "last_update"];
  if (!this->_internal_last_update().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_update());
  }

  // int32 port = 6 [json_name = "port"];
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // bool is_override_game_version = 16 [json_name = "is_override_game_version"];
  if (this->_internal_is_override_game_version() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServerV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameServerV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServerV1::GetClassData() const { return &_class_data_; }

void GameServerV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameServerV1 *>(to)->MergeFrom(
      static_cast<const GameServerV1 &>(from));
}


void GameServerV1::MergeFrom(const GameServerV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameServerV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternate_ips_.MergeFrom(from.alternate_ips_);
  ports_.MergeFrom(from.ports_);
  if (!from._internal_pod_name().empty()) {
    _internal_set_pod_name(from._internal_pod_name());
  }
  if (!from._internal_image_version().empty()) {
    _internal_set_image_version(from._internal_image_version());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_provider().empty()) {
    _internal_set_provider(from._internal_provider());
  }
  if (!from._internal_game_version().empty()) {
    _internal_set_game_version(from._internal_game_version());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_deployment().empty()) {
    _internal_set_deployment(from._internal_deployment());
  }
  if (!from._internal_region().empty()) {
    _internal_set_region(from._internal_region());
  }
  if (!from._internal_custom_attribute().empty()) {
    _internal_set_custom_attribute(from._internal_custom_attribute());
  }
  if (!from._internal_last_update().empty()) {
    _internal_set_last_update(from._internal_last_update());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_is_override_game_version() != 0) {
    _internal_set_is_override_game_version(from._internal_is_override_game_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameServerV1::CopyFrom(const GameServerV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameServerV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerV1::IsInitialized() const {
  return true;
}

void GameServerV1::InternalSwap(GameServerV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alternate_ips_.InternalSwap(&other->alternate_ips_);
  ports_.InternalSwap(&other->ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_name_, lhs_arena,
      &other->pod_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_version_, lhs_arena,
      &other->image_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, lhs_arena,
      &other->protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_, lhs_arena,
      &other->provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_version_, lhs_arena,
      &other->game_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deployment_, lhs_arena,
      &other->deployment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &region_, lhs_arena,
      &other->region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_attribute_, lhs_arena,
      &other->custom_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_update_, lhs_arena,
      &other->last_update_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerV1, is_override_game_version_)
      + sizeof(GameServerV1::is_override_game_version_)
      - PROTOBUF_FIELD_OFFSET(GameServerV1, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[18]);
}

// ===================================================================

class GameSessionNotificationUserKickedV1::_Internal {
 public:
};

GameSessionNotificationUserKickedV1::GameSessionNotificationUserKickedV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:session.GameSessionNotificationUserKickedV1)
}
GameSessionNotificationUserKickedV1::GameSessionNotificationUserKickedV1(const GameSessionNotificationUserKickedV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:session.GameSessionNotificationUserKickedV1)
}

inline void GameSessionNotificationUserKickedV1::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameSessionNotificationUserKickedV1::~GameSessionNotificationUserKickedV1() {
  // @@protoc_insertion_point(destructor:session.GameSessionNotificationUserKickedV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameSessionNotificationUserKickedV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionNotificationUserKickedV1::ArenaDtor(void* object) {
  GameSessionNotificationUserKickedV1* _this = reinterpret_cast< GameSessionNotificationUserKickedV1* >(object);
  (void)_this;
}
void GameSessionNotificationUserKickedV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionNotificationUserKickedV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSessionNotificationUserKickedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:session.GameSessionNotificationUserKickedV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionNotificationUserKickedV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SessionID = 1 [json_name = "sessionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "session.GameSessionNotificationUserKickedV1.SessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSessionNotificationUserKickedV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:session.GameSessionNotificationUserKickedV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SessionID = 1 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "session.GameSessionNotificationUserKickedV1.SessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:session.GameSessionNotificationUserKickedV1)
  return target;
}

size_t GameSessionNotificationUserKickedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:session.GameSessionNotificationUserKickedV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionID = 1 [json_name = "sessionID"];
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSessionNotificationUserKickedV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameSessionNotificationUserKickedV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSessionNotificationUserKickedV1::GetClassData() const { return &_class_data_; }

void GameSessionNotificationUserKickedV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameSessionNotificationUserKickedV1 *>(to)->MergeFrom(
      static_cast<const GameSessionNotificationUserKickedV1 &>(from));
}


void GameSessionNotificationUserKickedV1::MergeFrom(const GameSessionNotificationUserKickedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:session.GameSessionNotificationUserKickedV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSessionNotificationUserKickedV1::CopyFrom(const GameSessionNotificationUserKickedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:session.GameSessionNotificationUserKickedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionNotificationUserKickedV1::IsInitialized() const {
  return true;
}

void GameSessionNotificationUserKickedV1::InternalSwap(GameSessionNotificationUserKickedV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionNotificationUserKickedV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_notification_2eproto_getter, &descriptor_table_notification_2eproto_once,
      file_level_metadata_notification_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace session
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::session::NotificationEventEnvelope* Arena::CreateMaybeMessage< ::session::NotificationEventEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::NotificationEventEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::session::UserV1* Arena::CreateMaybeMessage< ::session::UserV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::UserV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartySessionV1* Arena::CreateMaybeMessage< ::session::PartySessionV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartySessionV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::SessionConfigV1* Arena::CreateMaybeMessage< ::session::SessionConfigV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::SessionConfigV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartyNotificationUserJoinedV1* Arena::CreateMaybeMessage< ::session::PartyNotificationUserJoinedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartyNotificationUserJoinedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartyNotificationMembersChangedV1* Arena::CreateMaybeMessage< ::session::PartyNotificationMembersChangedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartyNotificationMembersChangedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartyNotificationUserInvitedV1* Arena::CreateMaybeMessage< ::session::PartyNotificationUserInvitedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartyNotificationUserInvitedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartyNotificationUserRejectV1* Arena::CreateMaybeMessage< ::session::PartyNotificationUserRejectV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartyNotificationUserRejectV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::PartyNotificationUserKickedV1* Arena::CreateMaybeMessage< ::session::PartyNotificationUserKickedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::PartyNotificationUserKickedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameSessionNotificationUserInvitedV1* Arena::CreateMaybeMessage< ::session::GameSessionNotificationUserInvitedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameSessionNotificationUserInvitedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameSessionNotificationUserJoinedV1* Arena::CreateMaybeMessage< ::session::GameSessionNotificationUserJoinedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameSessionNotificationUserJoinedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameSessionNotificationMembersChangedV1* Arena::CreateMaybeMessage< ::session::GameSessionNotificationMembersChangedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameSessionNotificationMembersChangedV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::DSStatusChangedNotificationV1* Arena::CreateMaybeMessage< ::session::DSStatusChangedNotificationV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::DSStatusChangedNotificationV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::UserIDs* Arena::CreateMaybeMessage< ::session::UserIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::UserIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::session::Team* Arena::CreateMaybeMessage< ::session::Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::Team >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameSessionV1* Arena::CreateMaybeMessage< ::session::GameSessionV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameSessionV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::DSInformationV1* Arena::CreateMaybeMessage< ::session::DSInformationV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::DSInformationV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameServerV1_PortsEntry_DoNotUse* Arena::CreateMaybeMessage< ::session::GameServerV1_PortsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameServerV1_PortsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameServerV1* Arena::CreateMaybeMessage< ::session::GameServerV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameServerV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::session::GameSessionNotificationUserKickedV1* Arena::CreateMaybeMessage< ::session::GameSessionNotificationUserKickedV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::session::GameSessionNotificationUserKickedV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
