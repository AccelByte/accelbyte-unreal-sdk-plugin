def FAILED_STAGE = "";
pipeline {
    agent {
        node {
            label 'master'
        }
    }
    stages {
        stage('Cleanup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\Cleanup.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Cleanup";
                    }
                }
            }       
        }    
		stage('Generate Project Solution') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\GenerateProjectSolution.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Generate Project Solution";
                    }
                }
            }
        }
        stage('Build Windows') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\BuildWindows.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Windows";
                    }
                }
            }
        }
        stage('Build Linux') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\BuildLinux.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Linux";
                    }
                }
            }       
        }
        stage('ProxySetup') {
            agent {
                label "windows-sdk"
            }
            steps {
                powershell 'powershell -File $Env:WORKSPACE\\Jenkins\\ProxySetup.ps1'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "ProxySetup";
                    }
                }
            }
        }
        stage('Automation Test') {
            agent {
                label "windows-sdk"
            }
            steps {
                powershell 'powershell -File $Env:WORKSPACE\\Jenkins\\AutomationTest_Configure.ps1'
                bat '%WORKSPACE%\\Jenkins\\AutomationTest_Execute.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Automation Test";
                    }
                }
            }
        }    
        stage('Package') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\Package.bat'
                bat '%WORKSPACE%\\Jenkins\\Package_Plugin.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Package";
                    }
                }
            }
        }
		stage('Archive'){
            agent {
                label "windows-sdk"
            }      
            steps {
                script{	
                    def VERSION = powershell(returnStdout: true, script: '''
                        $json = Get-Content "$Env:WORKSPACE/version.json" | Out-String | ConvertFrom-Json
                        $VERSION = $Env:GIT_SHA + "-" + $json.version
                        Write-Output $VERSION
                    ''')
                    VERSION = VERSION.trim()
                }			
                bat '%WORKSPACE%\\Jenkins\\Archive.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Archive";
                    }
                }
            }
        }
        stage('Upload Archive'){
            agent {
                label "windows-sdk"
            }
            tools {
                maven "Maven 3.6.1"
            }

            environment {
            NEXUS_VERSION = "nexus3"
            NEXUS_PROTOCOL = "https"
            NEXUS_URL = "nexus.accelbyte.net"
            NEXUS_REPOSITORY = "justice-ue4-repository"
            NEXUS_CREDENTIAL_ID = "nexus-sdk"
            NEXUS_GROUP_ID = "net.accelbyte.AccelByteSDK"
            GIT_PATH = "${env.GIT_PATH}"      
            GIT_SHA = "${env.GIT_COMMIT}"       
            BUILD_NUMBER = "${env.BUILD_NUMBER}"
            WORKSPACE = "${env.WORKSPACE}"
            }
            
            steps {
                bat '%WORKSPACE%\\Jenkins\\UploadArchive.bat'
                script{
                    def PACKAGE = "${env.WORKSPACE}/artifacts/AccelByteUe4SdkPackage-${VERSION}.7z"
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: NEXUS_GROUP_ID,
                        version: VERSION,
                        repository: NEXUS_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            [
                                artifactId: "sdk-ue4",
                                classifier: '',
                                file: PACKAGE,
                                type: "7z"
                            ]
                        ]
                    );
                }
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Upload Archive";
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                slackSend (channel: "#sdk-pipeline", color: '#36B37E', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL* for `${env.JOB_NAME}` on branch `${env.GIT_BRANCH}` \n `${env.GIT_COMMIT}`: ${message} ")

                def turnOff = true       
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
        failure {
            script{
                def jobName = "${JOB_NAME}"
                def buildNumber = "${BUILD_NUMBER}"
                def gitBranch = "${GIT_BRANCH}"
                def buildURL = "${BUILD_URL}"
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()        

                echo "jobName: ${JOB_NAME}"
                echo "buildNumber: ${BUILD_NUMBER}"
                echo "gitBranch: ${GIT_BRANCH}"
                echo "buildURL: ${BUILD_URL}"

                slackSend (channel: "#sdk-pipeline", color: '#FF0000', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` \nProject: `${env.JOB_NAME}` \nBranch: `${env.GIT_BRANCH}` \nCommit: `${env.GIT_COMMIT}` \nMessage: `${message}` ")
                def turnOff = true
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
    }
}