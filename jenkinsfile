def FAILED_STAGE = "";
pipeline {
    agent {
        node {
            label 'master'
        }
    }
    stages {
        stage('Cleanup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\Cleanup.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Cleanup";
                    }
                }
            }       
        }    
		stage('Generate Project Solution') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\GenerateProjectSolution.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Generate Project Solution";
                    }
                }
            }
        }
        stage('Build Windows') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\BuildWindows.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Windows";
                    }
                }
            }
        }
        stage('Build Linux') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\BuildLinux.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Linux";
                    }
                }
            }       
        }
        stage('ProxySetup') {
            agent {
                label "windows-sdk"
            }
            steps {
                powershell 'powershell -File $Env:WORKSPACE\\Jenkins\\ProxySetup.ps1'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "ProxySetup";
                    }
                }
            }
        }
        stage('Automation Test') {
            agent {
                label "windows-sdk"
            }
            steps {
                powershell 'powershell -File $Env:WORKSPACE\\Jenkins\\AutomationTest_Configure.ps1'
                bat '%WORKSPACE%\\Jenkins\\AutomationTest_Execute.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Automation Test";
                    }
                }
            }
        }    
        stage('Package') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\Package.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Package";
                    }
                }
            }
        }
		stage('Archive'){
            agent {
                label "windows-sdk"
            }      
            steps {				
                bat '%WORKSPACE%\\Jenkins\\Archive.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Archive";
                    }
                }
            }
        }
        stage('Upload Archive'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\UploadArchive.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Upload Archive";
                    }
                }
            }
        }
        stage('Publish Documentation'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '%WORKSPACE%\\Jenkins\\PublishDocumentation.bat'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Publish Documentation";
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                slackSend (channel: "#sdk-pipeline", color: '#36B37E', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL* for `${env.JOB_NAME}` on branch `${env.GIT_BRANCH}` \n `${env.GIT_COMMIT}`: ${message} ")

                def turnOff = true       
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
        failure {
            script{
                def jobName = "${JOB_NAME}"
                def buildNumber = "${BUILD_NUMBER}"
                def gitBranch = "${GIT_BRANCH}"
                def buildURL = "${BUILD_URL}"
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()        

                echo "jobName: ${JOB_NAME}"
                echo "buildNumber: ${BUILD_NUMBER}"
                echo "gitBranch: ${GIT_BRANCH}"
                echo "buildURL: ${BUILD_URL}"

                slackSend (channel: "#sdk-pipeline", color: '#FF0000', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` \nProject: `${env.JOB_NAME}` \nBranch: `${env.GIT_BRANCH}` \nCommit: `${env.GIT_COMMIT}` \nMessage: `${message}` ")
                def turnOff = true
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
    }
}