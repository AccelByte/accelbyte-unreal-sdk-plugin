def FAILED_STAGE = "";
pipeline {
    agent {
        node {
            label 'master'
        }
    }
    stages {
        stage('Turn on EC2') {
            agent {
                label "master"
            }
            steps {
                sh '''
                    aws ec2 start-instances --instance-ids i-${SDK_INSTANCE_ID}
                    sleep 60
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Turn on EC2";
                    }
                }
            }
        }
        stage('Cleanup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    IF EXIST temp (
                    rd /s /q temp
                    )        
                    IF EXIST artifacts (
                    rd /s /q artifacts
                    )
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Cleanup";
                    }
                }
            }       
        }    
		stage('Setup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Binaries\\DotNet\\UnrealBuildTool.exe" -projectfiles  -project="%WORKSPACE%\\JusticeSDKDemo.uproject" -game -rocket -progress'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Setup";
                    }
                }
            }
        }
        stage('Build Windows') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\MSBuild.bat" "%WORKSPACE%\\JusticeSDKDemo.sln" /t:build /p:Configuration="Development Editor";Platform=Win64;verbosity=diagnostic'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Windows";
                    }
                }
            }
        }
        stage('Build Linux') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\MSBuild.bat" "%WORKSPACE%\\JusticeSDKDemo.sln" /t:build /p:Configuration="DebugGame";Platform=Linux;verbosity=diagnostic'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Linux";
                    }
                }
            }       
        }
        stage('Automation Test') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat 'echo "%WORKSPACE%\\JusticeSDKDemo.uproject"'
                bat '"%ENGINE_PATH%\\Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe" "%WORKSPACE%\\JusticeSDKDemo.uproject" -Server -unattended -nopause -ExecCmds="Automation RunTests JusticeTest;Quit" -log'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Automation Test";
                    }
                }
            }
        }    
        stage('Package') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\RunUAT.bat" -ScriptsForProject="%WORKSPACE%\\JusticeSDKDemo.uproject" BuildCookRun -nocompileeditor -nop4 -project="%WORKSPACE%\\JusticeSDKDemo.uproject" -cook -stage -archive -archivedirectory="%WORKSPACE%\\temp" -package -clientconfig=Shipping -ue4exe=UE4Editor-Cmd.exe  -pak -prereqs -targetplatform=Win64 -build -JusticeSDKDemo -utf8output'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Package";
                    }
                }
            }
        }
		stage('Archive'){
            agent {
                label "windows-sdk"
            }      
            steps {				
                bat '''        
                    mkdir "%WORKSPACE%\\artifacts"
                    IF EXIST "%WORKSPACE%\\Plugins\\JusticeSDK\\Binaries" (
                    rd /s /q "%WORKSPACE%\\Plugins\\JusticeSDK\\Binaries"
                    )        
                    IF EXIST "%WORKSPACE%\\Plugins\\JusticeSDK\\Intermediate" (
                    rd /s /q "%WORKSPACE%\\Plugins\\JusticeSDK\\Intermediate"
                    )    
                    "%ZIP_PATH%\\7z.exe" a -t7z "%WORKSPACE%\\artifacts\\JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" "%WORKSPACE%\\temp"
                    "%ZIP_PATH%\\7z.exe" a -t7z "%WORKSPACE%\\artifacts\\JusticeSDK-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" "%WORKSPACE%\\Plugins\\JusticeSDK"
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Archive";
                    }
                }
            }
        }
        stage('upload'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    aws s3 cp "%WORKSPACE%\\artifacts\\JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" s3://justice-sdk/UE4/JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z --storage-class STANDARD_IA --metadata GitSha=%GIT_COMMIT%,BuildNo=%BUILD_NUMBER%
                    aws s3 cp "%WORKSPACE%\\artifacts\\JusticeSDK-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" s3://justice-sdk/UE4/JusticeSDK-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z --storage-class STANDARD_IA --metadata GitSha=%GIT_COMMIT%,BuildNo=%BUILD_NUMBER%
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "upload";
                    }
                }
            }
        }
        stage('automerge'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    cd ..
                    git clone git@bitbucket.org:accelbyte/justice-customer-automerge.git
                    cd justice-customer-automerge
                    automerge.bat justice-ue4-sdk
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "automerge";
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                slackSend (channel: "#sdk-pipeline", color: '#36B37E', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL* for `${env.JOB_NAME}` on branch `${env.GIT_BRANCH}` \n `${env.GIT_COMMIT}`: ${message} ")

                def turnOff = true       
                Jenkins.instance.getItems().each { job->
                    if (job.getAssignedLabel()=="windows-sdk" && job.getName() != JOB_NAME && job.getLastBuild.getResult().equals(null)){
                        turnOff = false
                    }
                }
                if (turnOff){
                    //node('master'){
                    //sh '''
                    //aws ec2 stop-instances --instance-ids i-0627e8b0d88cff6de
                    //'''
                    //}
                }
            }
        }
        failure {
            script{
                def jobName = "${JOB_NAME}"
                def buildNumber = "${BUILD_NUMBER}"
                def gitBranch = "${GIT_BRANCH}"
                def buildURL = "${BUILD_URL}"
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()        

                echo "jobName: ${JOB_NAME}"
                echo "buildNumber: ${BUILD_NUMBER}"
                echo "gitBranch: ${GIT_BRANCH}"
                echo "buildURL: ${BUILD_URL}"

                slackSend (channel: "#sdk-pipeline", color: '#FF0000', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` \nProject: `${env.JOB_NAME}` \nBranch: `${env.GIT_BRANCH}` \nCommit: `${env.GIT_COMMIT}` \nMessage: `${message}` ")
                def turnOff = true
                Jenkins.instance.getItems().each { job->
                    if (job.getAssignedLabel()=="windows-sdk" && job.getName() != JOB_NAME && job.getLastBuild.getResult().equals(null)){
                        turnOff = false
                    }
                }
                if (turnOff){
                    //node('master'){
                    //sh '''
                    //aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    //'''
                    //}
                }
            }
        }
    }
}