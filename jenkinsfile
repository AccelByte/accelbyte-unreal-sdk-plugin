def FAILED_STAGE = "";
pipeline {
    agent {
        node {
            label 'master'
        }
    }
    stages {
        stage('Turn on EC2') {
            agent {
                label "master"
            }
            steps {
                sh '''
                    aws ec2 start-instances --instance-ids i-${SDK_INSTANCE_ID}
                    sleep 60
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Turn on EC2";
                    }
                }
            }
        }
        stage('Cleanup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    IF EXIST temp (
                    rd /s /q temp
                    )        
                    IF EXIST artifacts (
                    rd /s /q artifacts
                    )
                    IF EXIST Doxygen (
                    rd /s /q Doxygen
                    )
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Cleanup";
                    }
                }
            }       
        }    
		stage('Setup') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Binaries\\DotNet\\UnrealBuildTool.exe" -projectfiles  -project="%WORKSPACE%\\AccelByteUe4SdkDemo.uproject" -game -rocket -progress'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Setup";
                    }
                }
            }
        }
        stage('Build Windows') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\MSBuild.bat" "%WORKSPACE%\\AccelByteUe4SdkDemo.sln" /t:build /p:Configuration="Development Editor";Platform=Win64;verbosity=diagnostic'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Windows";
                    }
                }
            }
        }
        stage('Build Linux') {
            agent {
                label "windows-sdk"
            }
            steps {
                powershell '''
                    $CONFIG_FILE="$Env:WORKSPACE\\Config\\DefaultEngine.ini"
                    $CONFIG_FIELD =
                    "[/Script/AccelByteUe4Sdk.AccelByteSettings]`r`n" + 
                    "ClientId=$Env:UE4_CLIENT_ID`r`n" +
                    "ClientSecret=$Env:UE4_CLIENT_SECRET`r`n" +
                    "GameId=$Env:NAMESPACE`r`n" +
                    "PublisherId=$Env:UE4_PublisherNamespace`r`n" +
                    "IamServerUrl=`"$Env:UE4_BASE_URL`/iam`"`r`n" +
                    "PlatformServerUrl=`"$Env:UE4_BASE_URL`/platform`"`r`n" +
                    "LobbyServerUrl=`"$Env:UE4_BASE_URL`/lobby`/`"`r`n" +
                    "BasicServerUrl=`"$Env:UE4_BASE_URL`/basic`/`"`r`n"

                    (get-content -raw $CONFIG_FILE) -replace '(?ms)^(\\[\\/Script\\/AccelByteUe4Sdk\\.AccelByteSettings\\]).*' , $CONFIG_FIELD | out-file $CONFIG_FILE -Encoding UTF8

                    foreach ($LINE in get-content $CONFIG_FILE)
                    {
                        if (($LINE -match "ClientId" -or $LINE -match "ClientSecret" ) -eq $false)
                        {
                            echo $LINE
                        }
                    }
                '''
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\MSBuild.bat" "%WORKSPACE%\\AccelByteUe4SdkDemo.sln" /t:build /p:Configuration="DebugGame";Platform=Linux;verbosity=diagnostic'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Build Linux";
                    }
                }
            }       
        }
        stage('Automation Test') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat 'echo "%WORKSPACE%\\AccelByteUe4SdkDemo.uproject"'

                bat '''
                    SET IAM_DATABASE_URL = %IAM_DATABASE_URL%
                    SET NAMESPACE = %NAMESPACE%
                    SET TABLE_PREFIX = %TABLE_PREFIX%
                    SET AWS_ACCESS_KEY_ID = %AWS_ACCESS_KEY_ID%
                    SET AWS_SECRET_ACCESS_KEY = %AWS_SECRET_ACCESS_KEY%
                    SET AWS_REGION = %AWS_REGION%

                    set IAM_BASE_URL=%IAM_DATABASE_URL%
                    set ADMIN_CLIENT_ID=%ADMIN_CLIENT_ID%
                    set ADMIN_CLIENT_SECRET=%ADMIN_CLIENT_SECRET%
                    set ADMIN_NAMESPACE=%ADMIN_NAMESPACE%
                    set ADMIN_USER=%ADMIN_USER%
                    set ADMIN_PASSWORD=%ADMIN_PASSWORD%

                    set UTILITIES_PATH=%WORKSPACE%\\TestUtilities
                    set VARIABLE_FILE_PATH=%WORKSPACE%\\TestUtilities\\EcommerceVariables.txt

                    set ROOT_CATEGORY_PATH=/EcommRoot
                    set CHILD_CATEGORY_PATH=/EcommRoot/SubPath
                    set GRANDCHILD_CATEGORY_PATH=/EcommRoot/SubPath/Children
                    set TEST_EMAIL=ecommuser@example.com
                    set TEST_PASSWORD=123456
                    set CURRENCY_CODE=ECOMMCOIN
                    set INGAME_ITEM_TITLE=In Game E-Commerce Item
                    set CURRENCY_ITEM_TITLE=In Game Currency Item

                    set VARIABLES_FILE_CONTENT=%ROOT_CATEGORY_PATH%___%CHILD_CATEGORY_PATH%___%GRANDCHILD_CATEGORY_PATH%___%TEST_EMAIL%___%TEST_PASSWORD%___%CURRENCY_CODE%___%INGAME_ITEM_TITLE%___%CURRENCY_ITEM_TITLE%
                    echo %VARIABLES_FILE_CONTENT%> "%VARIABLE_FILE_PATH%"

                    "%UTILITIES_PATH%\\justice-test-utilities-windows_amd64.exe" ecommerce --setup --rootcategorypath %ROOT_CATEGORY_PATH% --childcategorypath %CHILD_CATEGORY_PATH% --grandchildcategorypath %GRANDCHILD_CATEGORY_PATH% --testemail %TEST_EMAIL% --testpassword %TEST_PASSWORD% --currencycode %CURRENCY_CODE% --ingameitemtitle "%INGAME_ITEM_TITLE%" --currencyitemtitle "%CURRENCY_ITEM_TITLE%"
                '''

                bat '''
                cls
                SET IAM_DATABASE_URL = %IAM_DATABASE_URL%
                SET NAMESPACE = %NAMESPACE%
                SET TABLE_PREFIX = %TABLE_PREFIX%
                SET AWS_ACCESS_KEY_ID = %AWS_ACCESS_KEY_ID%
                SET AWS_SECRET_ACCESS_KEY = %AWS_SECRET_ACCESS_KEY%
                SET AWS_REGION = %AWS_REGION%

                pushd SteamHelper
                SteamTicketHelper.exe login
                popd

                "%ENGINE_PATH%\\Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe" "%WORKSPACE%\\AccelByteUe4SdkDemo.uproject" -Server -unattended -nopause -ExecCmds="Automation RunTests AccelByte.Tests; Quit" -log

                "%ENGINE_PATH%\\Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe" "%WORKSPACE%\\AccelByteUe4SdkDemo.uproject" -Server -ExecCmds="Automation RunTests Project.Functional Tests; Quit" -log

                pushd SteamHelper
                SteamTicketHelper.exe logout
                popd
                '''
                bat '''
                    set IAM_BASE_URL=%IAM_DATABASE_URL%
                    set ADMIN_CLIENT_ID=%ADMIN_CLIENT_ID%
                    set ADMIN_CLIENT_SECRET=%ADMIN_CLIENT_SECRET%
                    set ADMIN_NAMESPACE=%ADMIN_NAMESPACE%
                    set ADMIN_USER=%ADMIN_USER%
                    set ADMIN_PASSWORD=%ADMIN_PASSWORD%

                    set UTILITIES_PATH=%WORKSPACE%\\TestUtilities

                    "%UTILITIES_PATH%\\justice-test-utilities-windows_amd64.exe" ecommerce --teardown
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Automation Test";
                    }
                }
            }
        }    
        stage('Package') {
            agent {
                label "windows-sdk"
            }
            steps {
                bat '"%ENGINE_PATH%\\Engine\\Build\\BatchFiles\\RunUAT.bat" -ScriptsForProject="%WORKSPACE%\\AccelByteUe4SdkDemo.uproject" BuildCookRun -nocompileeditor -nop4 -project="%WORKSPACE%\\AccelByteUe4SdkDemo.uproject" -cook -stage -archive -archivedirectory="%WORKSPACE%\\temp" -package -clientconfig=Shipping -ue4exe=UE4Editor-Cmd.exe  -pak -prereqs -targetplatform=Win64 -build -AccelByteUe4SdkDemo -utf8output'
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Package";
                    }
                }
            }
        }
		stage('Archive'){
            agent {
                label "windows-sdk"
            }      
            steps {				
                bat '''        
                    mkdir "%WORKSPACE%\\artifacts"
                    IF EXIST "%WORKSPACE%\\Plugins\\AccelByteUe4Sdk\\Binaries" (
                    rd /s /q "%WORKSPACE%\\Plugins\\AccelByteUe4Sdk\\Binaries"
                    )        
                    IF EXIST "%WORKSPACE%\\Plugins\\AccelByteUe4Sdk\\Intermediate" (
                    rd /s /q "%WORKSPACE%\\Plugins\\AccelByteUe4Sdk\\Intermediate"
                    )    
                    "%ZIP_PATH%\\7z.exe" a -t7z "%WORKSPACE%\\artifacts\\JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" "%WORKSPACE%\\temp"
                    "%ZIP_PATH%\\7z.exe" a -t7z "%WORKSPACE%\\artifacts\\AccelByteUe4Sdk-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" "%WORKSPACE%\\Plugins\\AccelByteUe4Sdk"
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "Archive";
                    }
                }
            }
        }
        stage('upload'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    aws s3 cp "%WORKSPACE%\\artifacts\\JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" s3://justice-sdk/UE4/JusticeSDKSampleGameDemo-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z --storage-class STANDARD_IA --metadata GitSha=%GIT_COMMIT%,BuildNo=%BUILD_NUMBER%
                    aws s3 cp "%WORKSPACE%\\artifacts\\AccelByteUe4Sdk-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z" s3://justice-sdk/UE4/JusticeSDK-%GIT_COMMIT%-BUILD-%BUILD_NUMBER%.7z --storage-class STANDARD_IA --metadata GitSha=%GIT_COMMIT%,BuildNo=%BUILD_NUMBER%
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "upload";
                    }
                }
            }
        }
        stage('PublishDocumentation'){
            agent {
                label "windows-sdk"
            }
            steps {
                bat '''
                    PublishDocumentation.bat
                '''
            }
            post {
                failure {
                    script{ 
                        FAILED_STAGE = "PublishDocumentation";
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                slackSend (channel: "#sdk-pipeline", color: '#36B37E', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL* for `${env.JOB_NAME}` on branch `${env.GIT_BRANCH}` \n `${env.GIT_COMMIT}`: ${message} ")

                def turnOff = true       
                Jenkins.instance.getItems().each { job->
                    if (job.getName() != JOB_NAME){
                        Jenkins.instance.getLabels().each{ label ->
                            if(label=="windows-sdk"){
                                if(job.getLastBuild.getResult().equals(null)){
                                    turnOff = false
                                }
                            }
                        }
                    }
                }
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
        failure {
            script{
                def jobName = "${JOB_NAME}"
                def buildNumber = "${BUILD_NUMBER}"
                def gitBranch = "${GIT_BRANCH}"
                def buildURL = "${BUILD_URL}"
                def message = ""
                message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()        

                echo "jobName: ${JOB_NAME}"
                echo "buildNumber: ${BUILD_NUMBER}"
                echo "gitBranch: ${GIT_BRANCH}"
                echo "buildURL: ${BUILD_URL}"

                slackSend (channel: "#sdk-pipeline", color: '#FF0000', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` \nProject: `${env.JOB_NAME}` \nBranch: `${env.GIT_BRANCH}` \nCommit: `${env.GIT_COMMIT}` \nMessage: `${message}` ")
                def turnOff = true
                Jenkins.instance.getItems().each { job->
                    if (job.getName() != JOB_NAME){
                        Jenkins.instance.getLabels().each{ label ->
                            if(label=="windows-sdk"){
                                if(job.getLastBuild.getResult().equals(null)){
                                    turnOff = false
                                }
                            }
                        }
                    }
                }
                if (turnOff){
                    node('master'){
                    sh '''
                    aws ec2 stop-instances --instance-ids i-${SDK_INSTANCE_ID} 
                    '''
                    }
                }
            }
        }
    }
}