@Library("github.com/AccelByte/jenkins-pipeline-library@master") _

buildByBranch = (currentBuild.getBuildCauses('jenkins.branch.BranchEventCause').size() > 0)
buildByTimer = (currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause').size() > 0)
buildByUser = (currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').size() > 0)
version = null
doDeploy = false
doTagging = false
buildCause = env.BUILD_CAUSE
pushTrigger = env.PUSH_TRIGGER
manualTrigger = (pushTrigger == null && env.UPSTREAM_BUILD == null)
branchName = params.BRANCH_NAME
buildTarget = params.BUILD_TARGET.toUpperCase()
grade = "deployment"
bitbucketSSHCreds = ""

ue4_version="default"

FAILED_STAGE = "";
GIT_BRANCH = env.GIT_BRANCH;
env.UE4_TESTS = params.UE4_TESTS == null ? "AccelByte.Tests" : params.UE4_TESTS;
pipeline {
    agent none
    environment {
        TEST_LOG = 'AutomationTestLog.log'
        POD_NAME = "ue4sdktest-${env.BUILD_NUMBER}"
    }
    stages {
        stage('Preparation') {
            agent {
                label 'master'
            }
            steps {
                bitbucketBuildStatus("INPROGRESS", "Bitbucket_Build_AccelByte", "accelbyte")
                script {
                    GIT_BRANCH = env.GIT_BRANCH
                    bitbucketSSHCreds = env.BITBUCKET_SSH_CREDS
                    // customer repo will parse customer-related files
                    if(fileExists('version-customer.json')){
                        version = readJSON file: "version-customer.json"
                    }else{
                        version = readJSON file: "version.json"
                    }
                    if (branchName == "master" || env.BRANCH_NAME == "master") {
                    // manual trigger won't override parameter passed from jenkins dashboard
                    // webhook trigger will have effect below
                        if (!manualTrigger) {
                            grade = "production"
                            // merge trigger
                            if (!buildByTimer) {
                                doTagging = true
                                doDeploy = true
                                def tags = sh (returnStdout: true, script: "git describe --tags")
                                def isRelease = (tags ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/)
                                if (isRelease) {
                                    buildTarget = "DEMO"
                                } else {
                                    buildTarget = "DEV"
                                }
                            } else {
                                buildTarget = "DEMO"
                            }
                        }
                    } else {
                        // same rules for webhook and manual trigger
                        doTagging = false
                        doDeploy = false
                        if (!manualTrigger) {
                            buildTarget = "DEV"
                        }
                    }
                    env.BASE_URL = env."DIRECT_BASE_URL_${buildTarget}"
                    env.ADMIN_BASE_URL = env."ADMIN_BASE_URL_${buildTarget}"
                    env.CLIENT_ID = env."CLIENT_ID_${buildTarget}"
                    env.CLIENT_SECRET = env."CLIENT_SECRET_${buildTarget}"
                    env.SERVER_CLIENT_ID = env."SERVER_CLIENT_ID_${buildTarget}"
                    env.SERVER_CLIENT_SECRET = env."SERVER_CLIENT_SECRET_${buildTarget}"
                    env.ADMIN_CLIENT_ID = env."ADMIN_CLIENT_ID_${buildTarget}"
                    env.ADMIN_CLIENT_SECRET = env."ADMIN_CLIENT_SECRET_${buildTarget}"
                    env.ADMIN_USER_NAME = env."ADMIN_USER_NAME_${buildTarget}"
                    env.ADMIN_USER_PASS = env."ADMIN_USER_PASS_${buildTarget}"
                    env.LOBBY_SERVER_URL = env."LOBBY_SERVER_URL_${buildTarget}"

                    ue4_version = params.UE4_VERSION == null ? "default" : params.UE4_VERSION
                    config = readJSON file: "jenkins.config.json"
                    config.build.targets."${ue4_version}".env_vars.each() {
                        env."${it.key}" = "${it.value}"
                    }

                    def DisabledTests = (params?.AB_UE4_SDK_DISABLED_TESTS?.trim());
                    if (DisabledTests != null && DisabledTests != "") {
                        env.AB_UE4_SDK_DISABLED_TESTS = params.AB_UE4_SDK_DISABLED_TESTS
                    }
                }
            }
        }
        stage('Build and Deploy') {
            agent {
                label "justice-sdk-builder"
            }
            stages {
                stage('Cleanup') {
                    steps {
                        powershell "& \"${env.WORKSPACE}\\Jenkins\\Cleanup.ps1\""
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Cleanup";
                            }
                        }
                    }
                }
                stage('Write Config') {
                    steps {
                        powershell "& \"${env.WORKSPACE}\\Jenkins\\WriteConfig.ps1\""
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Write Config";
                            }
                        }
                    }
                }
                stage('Build Linux') {
                    steps {
                        echo "build linux"
                        powershell "& \"${env.WORKSPACE}\\Jenkins\\Build.ps1\" -platform Linux"
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Build Linux";
                            }
                        }
                    }
                }
                stage('Build Windows') {
                    steps {
                        echo "build win64"
                        powershell "& \"${env.WORKSPACE}\\Jenkins\\Build.ps1\" -platform Win64"
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Build Windows";
                            }
                        }
                    }
                }
                stage('ProxySetup') {
                    steps {
                        script {
                            if ("${env.USE_PROXY}" == "true") {
                                powershell 'powershell -File $Env:WORKSPACE\\Jenkins\\ProxySetup.ps1'
                            } else {
                                echo 'Proxy is not used'
                            }
                        }
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "ProxySetup";
                            }
                        }
                    }
                }
                stage('Automation Test') {
                    steps {
                        bat "powershell -Command \"${env.WORKSPACE}\\Jenkins\\LoginSteam.ps1\""
                        script {
                            def testsByGroup = [
                                "Core" : "AccelByte.Tests.Core",  
                                "IAM_Legal_ECommerce" : "AccelByte.Tests.Agreement+AccelByte.Tests.ServerOauth2+AccelByte.Tests.AUser+AccelByte.Tests.ECommerce+AccelByte.Tests.Subscription",  
                                "Social": "AccelByte.Tests.Achievement+AccelByte.Tests.CloudSave+AccelByte.Tests.ServerCloudSave+AccelByte.Tests.CloudStorage+AccelByte.Tests.GameProfile+AccelByte.Tests.Statistic+AccelByte.Tests.ServerStatistic+AccelByte.Tests.Leaderboard+AccelByte.Tests.MultiRegistry",  
                                "Analytics": "AccelByte.Tests.GameTelemetry+AccelByte.Tests.ServerGameTelemetry",
                                "Play": "AccelByte.Tests.DSM+AccelByte.Tests.Qos+AccelByte.Tests.Lobby+AccelByte.Tests.ServerJoinableSession+AccelByte.Tests.ServerLobby+AccelByte.Tests.SessionBrowser"
                            ]
                            failedTestGroups = []
    
                            for (group in params.TEST_GROUPS.split(",")) {
                                echo "Run tests for ${group}"
                                def script = """
                                    & \"${env.WORKSPACE}\\Jenkins\\RunTests.ps1\" `
                                    -tests:${testsByGroup[group]} `
                                    -log:${group}_Log.log `
                                    -report:\"${env.WORKSPACE}\\Saved\\Logs\\${group}\""""
                                
                                    def status = powershell(returnStatus: true, script: script)
                                    archiveArtifacts artifacts: "Saved/Logs/${group}_Log.log, Saved/Logs/${group}/*"

                                    if (status != 0) {
                                        failedTestGroups.add(group)
                                    }
                            }
                            
                            if (failedTestGroups.size() > 0) {
                                error("Some test groups are failed: ${env.failedTestGroups}")
                            }
                        }
                    }
                    post {
                        always {
                            powershell "& \"${env.WORKSPACE}\\Jenkins\\LogoutSteam.ps1\""
                        }
                    }
                }
                stage('Package') {
                    when {
                        expression { return doDeploy }
                    }
                    steps {
                        bat '%WORKSPACE%\\Jenkins\\Package.bat'
                        bat '%WORKSPACE%\\Jenkins\\Package_Plugin.bat'
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Package";
                            }
                        }
                    }
                }
                stage('Archive'){
                    when {
                        expression { return doDeploy }
                    }
                    steps {
                        script{
                            def VERSION = version
                        }
                        bat '%WORKSPACE%\\Jenkins\\Archive.bat'
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Archive";
                            }
                        }
                    }
                }
                stage('Upload Archive'){
                    when {
                        expression { return doDeploy }
                    }
                    tools {
                        maven "Maven 3.6.1"
                    }

                    environment {
                        NEXUS_VERSION = "nexus3"
                        NEXUS_PROTOCOL = "https"
                        NEXUS_URL = "nexus.accelbyte.net"
                        NEXUS_REPOSITORY = "justice-ue4-repository"
                        NEXUS_CREDENTIAL_ID = "nexus-sdk"
                        NEXUS_GROUP_ID = "net.accelbyte.AccelByteSDK"
                        GIT_PATH = "${env.GIT_PATH}"
                        GIT_SHA = "${env.GIT_COMMIT}"
                        BUILD_NUMBER = "${env.BUILD_NUMBER}"
                        WORKSPACE = "${env.WORKSPACE}"
                    }

                    steps {
                        bat '%WORKSPACE%\\Jenkins\\UploadArchive.bat'
                        script{
                            def PACKAGE = "${env.WORKSPACE}/artifacts/AccelByteUe4SdkPackage-${VERSION}.7z"
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: NEXUS_GROUP_ID,
                                version: VERSION,
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [
                                        artifactId: "sdk-ue4",
                                        classifier: '',
                                        file: PACKAGE,
                                        type: "7z"
                                    ]
                                ]
                            );
                        }
                    }
                    post {
                        failure {
                            script{
                                FAILED_STAGE = "Upload Archive";
                            }
                        }
                    }
                }
            }
        }
    }
    post {
//         always {
//           node('master') {
//             script{
//               if (buildByTimer) {
//                 version = sh(returnStdout: true, script: 'cat version.json | grep "version" | tr -d \' "version": "\'').trim()
// 
//                 withAWS(
//                   credentials: "accelbyte_deployment",
//                   region: "us-west-2") {
//                     sh """
//                       ./jenkinsTestMetrics.sh \
//                         -s ${env.JOB_NAME} \
//                         -v ${version} \
//                         -j ${env.BUILD_URL}console \
//                         -r ${env.BUILD_URL}artifact/Saved/Logs/AutomationTestLog.log \
//                         -p ${currentBuild.currentResult}
//                     """
//                   }
//               }
//             }
//           }
//         }
        success {
            node('master') {
                script {
                    bitbucketBuildStatus("SUCCESS", "Bitbucket_Build_AccelByte", "accelbyte")

                    def commitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    def gitHash = sh(returnStdout: true, script: 'git rev-parse --short=10 HEAD').trim()
                    def message = """
                        |<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL*
                        |Project: `${env.JOB_NAME}` 
                        |Branch: `${env.BRANCH_NAME}` 
                        |
                        |Commit: `${gitHash}`:
                        |${commitMessage}
                        |""".stripMargin()

                    slackSend(channel: "#activity-justice-sdk", color: '#36B37E', message: message)

                    if (buildByTimer) {
                        slackSend(channel: "#product-justice-automation-monitoring", color: '#36B37E', message: message)
                    }
                }
            }
        }
        failure {
            node('master') {
                script{
                    bitbucketBuildStatus("FAILURE", "Bitbucket_Build_AccelByte", "accelbyte")

                    def commitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    def gitHash = sh(returnStdout: true, script: 'git rev-parse --short=10 HEAD').trim()
                    
                    def failedTestLinks = ""
                    
                    for (group in failedTestGroups) {
                        failedTestLinks += "${group}: "
                        failedTestLinks += "<${env.BUILD_URL}artifact/Saved/Logs/${group}/index.json|Report>, "
                        failedTestLinks += "<${env.BUILD_URL}artifact/Saved/Logs/${group}_Log.log|Log>\n"
                    }
                                           
                    def message = """
                        |<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` 
                        |Project: `${env.JOB_NAME}` 
                        |Branch: `${env.BRANCH_NAME}` 
                        |
                        |Commit: `${gitHash}`:
                        |${commitMessage}
                        |
                        |Failed Tests: 
                        |${failedTestLinks} 
                        |""".stripMargin()

                    echo "jobName: ${JOB_NAME}"
                    echo "buildNumber: ${BUILD_NUMBER}"
                    echo "gitBranch: ${GIT_BRANCH}"
                    echo "buildURL: ${BUILD_URL}"

                    slackSend(channel: "#activity-justice-sdk", color: '#FF0000', message: message)

                    if (buildByTimer) {
                        slackSend(channel: "#product-justice-automation-monitoring", color: '#FF0000', message: message)
                    }
                }
            }
        }
    }
}